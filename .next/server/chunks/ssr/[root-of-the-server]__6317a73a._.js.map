{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions/send-campaign-action.ts"],"sourcesContent":["'use server';\n\nimport 'isomorphic-fetch';\nimport { ClientSecretCredential } from '@azure/identity';\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { TokenCredentialAuthenticationProvider } from '@microsoft/microsoft-graph-client/authProviders/azureTokenCredentials';\nimport mysql from 'mysql2/promise';\nimport { parse } from 'csv-parse/sync';\nimport * as XLSX from 'xlsx';\n\n/**\n * @fileoverview Acción de servidor para enviar una campaña de correo electrónico.\n * Obtiene destinatarios desde una fuente de datos y los envía por lotes\n * para respetar los límites de la API, utilizando Microsoft Graph.\n */\n\ninterface SendCampaignPayload {\n  subject: string;\n  htmlBody: string;\n  recipientData: {\n    type: 'date' | 'csv' | 'sql' | 'excel';\n    value: string;\n  };\n  batchSize: number;\n  emailDelay: number; // ms\n  batchDelay: number; // s\n}\n\n/**\n * Obtiene una lista de destinatarios desde la fuente especificada.\n */\nasync function getRecipients(\n  recipientData: SendCampaignPayload['recipientData']\n): Promise<{ email: string }[]> {\n  const { type, value } = recipientData;\n\n  if (type === 'csv') {\n    try {\n      const records = parse(value, {\n        columns: true,\n        skip_empty_lines: true,\n      });\n      if (records.length === 0 || !('email' in records[0])) {\n        throw new Error('La columna \"email\" no se encontró o el archivo está vacío.');\n      }\n      return records.map((record: any) => ({ email: record.email })).filter((r: {email: string}) => r.email && r.email.includes('@'));\n    } catch (error) {\n      console.error('Error al procesar el archivo CSV:', error);\n      throw new Error(`Error al procesar el archivo CSV: ${(error as Error).message}`);\n    }\n  }\n\n  if (type === 'excel') {\n    try {\n      const buffer = Buffer.from(value, 'base64');\n      const workbook = XLSX.read(buffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData: any[] = XLSX.utils.sheet_to_json(worksheet);\n      if (jsonData.length === 0) return [];\n      const emailKey = Object.keys(jsonData[0]).find(key => key.toLowerCase() === 'email');\n      if (!emailKey) throw new Error('La columna \"email\" no se encontró en el archivo Excel.');\n      return jsonData.map(row => ({ email: row[emailKey] })).filter(r => r.email && typeof r.email === 'string' && r.email.includes('@'));\n    } catch (error) {\n      console.error('Error al procesar el archivo Excel:', error);\n      throw new Error(`Error al procesar el archivo Excel: ${(error as Error).message}`);\n    }\n  }\n\n  const { MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_PORT } = process.env;\n  if (!MYSQL_HOST || !MYSQL_USER || !MYSQL_DATABASE) {\n    throw new Error('Faltan las variables de entorno de la base de datos. Por favor, configúralas.');\n  }\n\n  let connection;\n  try {\n    connection = await mysql.createConnection({\n      host: MYSQL_HOST,\n      port: MYSQL_PORT ? parseInt(MYSQL_PORT, 10) : 3306,\n      user: MYSQL_USER,\n      password: MYSQL_PASSWORD,\n      database: MYSQL_DATABASE,\n    });\n\n    let sql_query = '';\n    let params: any[] = [];\n\n    if (type === 'date') {\n      sql_query = `\n        SELECT t1.email\n        FROM order_data AS t1 INNER JOIN order_data_online AS t2 ON t1.Ds_Merchant_Order = t2.Ds_Order\n        WHERE\n            t1.fecha_visita = ?\n            AND t2.Ds_ErrorCode = '00'\n            AND t2.Ds_ErrorMessage = 'completed'\n            AND NOT t1.email IN ('alberto.silva@papalote.org.mx', 'alejandracervantesm@gmail.com')\n      `;\n      params = [value];\n    } else if (type === 'sql') {\n      sql_query = value;\n    }\n\n    const [rows] = await connection.execute(sql_query, params);\n    return (rows as { email: string }[]).filter(row => row.email);\n  } catch (error) {\n    console.error('Error al conectar o consultar la base de datos:', error);\n    throw new Error('No se pudo obtener los contactos de la base de datos.');\n  } finally {\n    if (connection) await connection.end();\n  }\n}\n\nasync function getGraphClient() {\n    const { GRAPH_CLIENT_ID, GRAPH_TENANT_ID, GRAPH_CLIENT_SECRET } = process.env;\n    if (!GRAPH_CLIENT_ID || !GRAPH_TENANT_ID || !GRAPH_CLIENT_SECRET) {\n        throw new Error('Faltan las variables de entorno de Microsoft Graph. Por favor, configúralas.');\n    }\n    const credential = new ClientSecretCredential(GRAPH_TENANT_ID, GRAPH_CLIENT_ID, GRAPH_CLIENT_SECRET);\n    const authProvider = new TokenCredentialAuthenticationProvider(credential, { scopes: ['https://graph.microsoft.com/.default'] });\n    return Client.initWithMiddleware({ authProvider });\n}\n\nconst delay = (ms: number) => new Promise(res => setTimeout(res, ms));\n\nexport async function sendCampaign(payload: SendCampaignPayload) {\n  const { subject, htmlBody, recipientData, batchSize, emailDelay, batchDelay } = payload;\n  const startTime = Date.now();\n\n  const { GRAPH_USER_MAIL } = process.env;\n  if (!GRAPH_USER_MAIL) {\n    throw new Error('Falta la variable de entorno GRAPH_USER_MAIL. Por favor, configúrala.');\n  }\n\n  const recipients = await getRecipients(recipientData);\n  if (recipients.length === 0) {\n    return { success: true, message: `No se encontraron destinatarios. No se enviaron correos.`, stats: { sentCount: 0, failedCount: 0, totalRecipients: 0, duration: 0 } };\n  }\n\n  const totalRecipients = recipients.length;\n  const graphClient = await getGraphClient();\n  let sentCount = 0;\n  let failedCount = 0;\n\n  const recipientBatches = [];\n  for (let i = 0; i < recipients.length; i += batchSize) {\n    recipientBatches.push(recipients.slice(i, i + batchSize));\n  }\n\n  for (const [index, batch] of recipientBatches.entries()) {\n    for (const contact of batch) {\n        try {\n            const message = {\n                subject: subject,\n                body: { contentType: 'HTML', content: htmlBody },\n                toRecipients: [{ emailAddress: { address: contact.email } }],\n            };\n            await graphClient.api(`/users/${GRAPH_USER_MAIL}/sendMail`).post({ message, saveToSentItems: 'true' });\n            sentCount++;\n        } catch (error) {\n            failedCount++;\n            const errorMessage = (error as any)?.body ? JSON.parse((error as any).body).error.message : (error as Error).message;\n            console.error(`Error al enviar correo a ${contact.email} usando Graph:`, errorMessage);\n        }\n        \n        // Delay between emails inside a batch\n        if(emailDelay > 0) await delay(emailDelay);\n    }\n    \n    // Delay between batches\n    if (index < recipientBatches.length - 1) {\n      if(batchDelay > 0) await delay(batchDelay * 1000);\n    }\n  }\n  \n  const endTime = Date.now();\n  const duration = (endTime - startTime) / 1000;\n\n  let message = `Envío completado con Microsoft Graph. Enviados: ${sentCount}. Fallidos: ${failedCount}.`;\n  if (failedCount > 0) {\n    message += ' Revisa la consola del servidor para más detalles sobre los errores.';\n  }\n\n  return { success: true, message, stats: { sentCount, failedCount, totalRecipients, duration } };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 460, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28main%29/campaigns/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {sendCampaign as '401372f659c5451f99035a7f116333db4ac66a7ce4'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/campaigns/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/campaigns/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/campaigns/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/campaigns/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/campaigns/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/campaigns/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}