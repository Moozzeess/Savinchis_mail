{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/template-actions.ts"],"sourcesContent":["'use server';\n\nimport mysql from 'mysql2/promise';\nimport type { Block } from '@/lib/template-utils';\n\nasync function getDbConnection() {\n    const { MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_PORT } = process.env;\n    if (!MYSQL_HOST || !MYSQL_USER || !MYSQL_DATABASE) {\n        throw new Error('Faltan las variables de entorno de la base de datos. Por favor, configúralas.');\n    }\n    return mysql.createConnection({\n        host: MYSQL_HOST,\n        port: MYSQL_PORT ? parseInt(MYSQL_PORT, 10) : 3306,\n        user: MYSQL_USER,\n        password: MYSQL_PASSWORD,\n        database: MYSQL_DATABASE,\n    });\n}\n\nexport interface Template {\n    id_plantilla: number;\n    nombre: string;\n    asunto_predeterminado: string;\n    contenido: Block[];\n    fecha_creacion: string;\n}\n\nexport async function getTemplatesAction(): Promise<Template[]> {\n    let connection;\n    try {\n        connection = await getDbConnection();\n        const [rows] = await connection.execute('SELECT id_plantilla, nombre, asunto_predeterminado, contenido, fecha_creacion FROM plantillas ORDER BY fecha_creacion DESC');\n        \n        const templates = (rows as any[]).map(row => ({\n            ...row,\n            contenido: row.contenido ? JSON.parse(row.contenido) : [],\n        }));\n        \n        return templates as Template[];\n    } catch (error) {\n        console.error('Error al obtener las plantillas:', error);\n        return [];\n    } finally {\n        if (connection) await connection.end();\n    }\n}\n\nexport async function getTemplateAction(id: number): Promise<Template | null> {\n    let connection;\n    try {\n        connection = await getDbConnection();\n        const [rows] = await connection.execute('SELECT id_plantilla, nombre, asunto_predeterminado, contenido, fecha_creacion FROM plantillas WHERE id_plantilla = ?', [id]);\n        \n        if ((rows as any[]).length === 0) return null;\n\n        const row = (rows as any[])[0];\n        return {\n            ...row,\n            contenido: row.contenido ? JSON.parse(row.contenido) : [],\n        } as Template;\n\n    } catch (error) {\n        console.error(`Error al obtener la plantilla ${id}:`, error);\n        return null;\n    } finally {\n        if (connection) await connection.end();\n    }\n}\n\nexport async function saveTemplateAction(templateData: {\n    id?: number,\n    nombre: string,\n    asunto_predeterminado: string,\n    contenido: Block[]\n}): Promise<{ success: boolean; message: string, id?: number }> {\n    const { id, nombre, asunto_predeterminado, contenido } = templateData;\n    const contenidoJson = JSON.stringify(contenido);\n    let connection;\n    try {\n        connection = await getDbConnection();\n        if (id) {\n            await connection.execute(\n                'UPDATE plantillas SET nombre = ?, asunto_predeterminado = ?, contenido = ? WHERE id_plantilla = ?',\n                [nombre, asunto_predeterminado, contenidoJson, id]\n            );\n            return { success: true, message: 'Plantilla actualizada con éxito.', id };\n        } else {\n            const [result] = await connection.execute(\n                'INSERT INTO plantillas (nombre, asunto_predeterminado, contenido) VALUES (?, ?, ?)',\n                [nombre, asunto_predeterminado, contenidoJson]\n            );\n            const insertId = (result as any).insertId;\n            return { success: true, message: 'Plantilla creada con éxito.', id: insertId };\n        }\n    } catch (error) {\n        console.error('Error al guardar la plantilla:', error);\n        return { success: false, message: `Error al guardar la plantilla: ${(error as Error).message}` };\n    } finally {\n        if (connection) await connection.end();\n    }\n}\n\nexport async function deleteTemplateAction(id: number): Promise<{ success: boolean; message: string }> {\n    let connection;\n    try {\n        connection = await getDbConnection();\n        await connection.execute('DELETE FROM plantillas WHERE id_plantilla = ?', [id]);\n        return { success: true, message: 'Plantilla eliminada con éxito.' };\n    } catch (error) {\n        console.error(`Error al eliminar la plantilla ${id}:`, error);\n        return { success: false, message: `Error al eliminar la plantilla: ${(error as Error).message}` };\n    } finally {\n        if (connection) await connection.end();\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28main%29/templates/editor/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getTemplatesAction as '00fdeee1b67912cd40169e627b506c6488d511c086'} from 'ACTIONS_MODULE0'\nexport {deleteTemplateAction as '4024a31c3d0e73da34e600b2dfb31666da4162b857'} from 'ACTIONS_MODULE0'\nexport {saveTemplateAction as '40263c8206bd41e6787323cdaa6b06d06cb029fa6e'} from 'ACTIONS_MODULE0'\nexport {getTemplateAction as '40fe3d066ef8bfa392b4411a87e12ed72d92fcc5c9'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/template-editor-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TemplateEditorClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call TemplateEditorClient() from the server but TemplateEditorClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/template-editor-client.tsx <module evaluation>\",\n    \"TemplateEditorClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,uBAAuB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,2EACA","debugId":null}},
    {"offset": {"line": 318, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/template-editor-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TemplateEditorClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call TemplateEditorClient() from the server but TemplateEditorClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/template-editor-client.tsx\",\n    \"TemplateEditorClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,uBAAuB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,uDACA","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/templates/editor/page.tsx"],"sourcesContent":["import { TemplateEditorClient } from \"@/components/template-editor-client\";\nimport { getTemplateAction } from \"@/actions/template-actions\";\n\n/**\n * Página del Editor de Plantillas.\n * Carga los datos de una plantilla existente si se proporciona un ID,\n * o prepara el editor para una nueva plantilla.\n * @param {object} props - Propiedades del componente.\n * @param {object} props.searchParams - Parámetros de la URL.\n * @param {string} props.searchParams.id - El ID de la plantilla a editar.\n */\nexport default async function TemplateEditorPage({ searchParams }: { searchParams: { id?: string } }) {\n  const templateId = searchParams.id ? parseInt(searchParams.id, 10) : undefined;\n  let templateData = null;\n\n  if (templateId) {\n    templateData = await getTemplateAction(templateId);\n  }\n\n  return (\n    <TemplateEditorClient template={templateData} />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAUe,eAAe,mBAAmB,EAAE,YAAY,EAAqC;IAClG,MAAM,aAAa,aAAa,EAAE,GAAG,SAAS,aAAa,EAAE,EAAE,MAAM;IACrE,IAAI,eAAe;IAEnB,IAAI,YAAY;QACd,eAAe,MAAM,CAAA,GAAA,qIAAA,CAAA,oBAAiB,AAAD,EAAE;IACzC;IAEA,qBACE,8OAAC,kJAAA,CAAA,uBAAoB;QAAC,UAAU;;;;;;AAEpC","debugId":null}}]
}