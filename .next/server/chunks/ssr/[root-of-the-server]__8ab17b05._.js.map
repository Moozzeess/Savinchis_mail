{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ssocialti/Documents/GitHub/Savinchis_mail/src/actions/template-actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport mysql from 'mysql2/promise';\r\nimport type { Block } from '@/lib/template-utils';\r\n\r\nasync function getDbConnection() {\r\n    const { MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_PORT } = process.env;\r\n    if (!MYSQL_HOST || !MYSQL_USER || !MYSQL_DATABASE) {\r\n        throw new Error('Faltan las variables de entorno de la base de datos. Por favor, configúralas.');\r\n    }\r\n    return mysql.createConnection({\r\n        host: MYSQL_HOST,\r\n        port: MYSQL_PORT ? parseInt(MYSQL_PORT, 10) : 3306,\r\n        user: MYSQL_USER,\r\n        password: MYSQL_PASSWORD,\r\n        database: MYSQL_DATABASE,\r\n    });\r\n}\r\n\r\nexport interface Template {\r\n    id_plantilla: number;\r\n    nombre: string;\r\n    asunto_predeterminado: string;\r\n    contenido: Block[];\r\n    fecha_creacion: string;\r\n    categoria: string;\r\n}\r\n\r\nexport async function getTemplatesAction(): Promise<Template[]> {\r\n    let connection;\r\n    try {\r\n        connection = await getDbConnection();\r\n        const [rows] = await connection.execute('SELECT id_plantilla, nombre, asunto_predeterminado, contenido, fecha_creacion, categoria FROM plantillas ORDER BY fecha_creacion DESC');\r\n        \r\n        const templates = (rows as any[]).map(row => {\r\n            let parsedContenido;\r\n            if (typeof row.contenido === 'string') {\r\n                try {\r\n                    parsedContenido = row.contenido ? JSON.parse(row.contenido) : [];\r\n                } catch (error) {\r\n                    console.error(`Error al parsear el JSON del contenido de la plantilla ID ${row.id_plantilla}:`, row.contenido);\r\n                    parsedContenido = [];\r\n                }\r\n            } else {\r\n                parsedContenido = row.contenido || [];\r\n            }\r\n            return {\r\n                ...row,\r\n                contenido: parsedContenido,\r\n            };\r\n        });\r\n        \r\n        return templates as Template[];\r\n    } catch (error) {\r\n        console.error('Error al obtener las plantillas:', error);\r\n        return [];\r\n    } finally {\r\n        if (connection) await connection.end();\r\n    }\r\n}\r\n\r\nexport async function getTemplateAction(id: number): Promise<Template | null> {\r\n    let connection;\r\n    try {\r\n        connection = await getDbConnection();\r\n        const [rows] = await connection.execute('SELECT id_plantilla, nombre, asunto_predeterminado, contenido, fecha_creacion, categoria FROM plantillas WHERE id_plantilla = ?', [id]);\r\n        \r\n        if ((rows as any[]).length === 0) return null;\r\n\r\n        const row = (rows as any[])[0];\r\n        let parsedContenido;\r\n        if (typeof row.contenido === 'string') {\r\n            try {\r\n                parsedContenido = row.contenido ? JSON.parse(row.contenido) : [];\r\n            } catch (error) {\r\n                console.error(`Error al parsear el JSON del contenido de la plantilla ID ${row.id_plantilla}:`, row.contenido);\r\n                parsedContenido = [];\r\n            }\r\n        } else {\r\n            parsedContenido = row.contenido || [];\r\n        }\r\n        return {\r\n            ...row,\r\n            contenido: parsedContenido,\r\n        } as Template;\r\n\r\n    } catch (error) {\r\n        console.error(`Error al obtener la plantilla ${id}:`, error);\r\n        return null;\r\n    } finally {\r\n        if (connection) await connection.end();\r\n    }\r\n}\r\n\r\nexport async function saveTemplateAction(templateData: {\r\n    id?: number,\r\n    nombre: string,\r\n    asunto_predeterminado: string,\r\n    contenido: Block[],\r\n    categoria: string\r\n}): Promise<{ success: boolean; message: string, id?: number }> {\r\n    const { id, nombre, asunto_predeterminado, contenido, categoria } = templateData;\r\n    const contenidoJson = JSON.stringify(contenido);\r\n    let connection;\r\n\r\n    const logData = { id, nombre };\r\n\r\n    try {\r\n        connection = await getDbConnection();\r\n        if (id) {\r\n            await connection.execute(\r\n                'UPDATE plantillas SET nombre = ?, asunto_predeterminado = ?, contenido = ?, categoria = ? WHERE id_plantilla = ?',\r\n                [nombre, asunto_predeterminado, contenidoJson, categoria, id]\r\n            );\r\n            console.log('Plantilla actualizada con éxito:', logData);\r\n            return { success: true, message: 'Plantilla actualizada con éxito.', id };\r\n        } else {\r\n            const [result] = await connection.execute(\r\n                'INSERT INTO plantillas (nombre, asunto_predeterminado, contenido, categoria) VALUES (?, ?, ?, ?)',\r\n                [nombre, asunto_predeterminado, contenidoJson, categoria]\r\n            );\r\n            const insertId = (result as any).insertId;\r\n            console.log('Plantilla creada con éxito:', { ...logData, id: insertId });\r\n            return { success: true, message: 'Plantilla creada con éxito.', id: insertId };\r\n        }\r\n    } catch (error) {\r\n        console.error('Error al guardar la plantilla:', { ...logData, error: (error as Error).message });\r\n        return { success: false, message: `Error al guardar la plantilla: ${(error as Error).message}` };\r\n    } finally {\r\n        if (connection) await connection.end();\r\n    }\r\n}\r\n\r\nexport async function deleteTemplateAction(id: number): Promise<{ success: boolean; message: string }> {\r\n    let connection;\r\n    try {\r\n        connection = await getDbConnection();\r\n        await connection.execute('DELETE FROM plantillas WHERE id_plantilla = ?', [id]);\r\n        return { success: true, message: 'Plantilla eliminada con éxito.' };\r\n    } catch (error) {\r\n        console.error(`Error al eliminar la plantilla ${id}:`, error);\r\n        return { success: false, message: `Error al eliminar la plantilla: ${(error as Error).message}` };\r\n    } finally {\r\n        if (connection) await connection.end();\r\n    }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ssocialti/Documents/GitHub/Savinchis_mail/.next-internal/server/app/%28main%29/events/editor/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getTemplatesAction as '0074af10b51cc6814b564e0ad8563cd8329a04dcee'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ssocialti/Documents/GitHub/Savinchis_mail/src/components/event-editor.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const EventEditor = registerClientReference(\n    function() { throw new Error(\"Attempted to call EventEditor() from the server but EventEditor is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/event-editor.tsx <module evaluation>\",\n    \"EventEditor\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,iEACA","debugId":null}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ssocialti/Documents/GitHub/Savinchis_mail/src/components/event-editor.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const EventEditor = registerClientReference(\n    function() { throw new Error(\"Attempted to call EventEditor() from the server but EventEditor is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/event-editor.tsx\",\n    \"EventEditor\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,6CACA","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ssocialti/Documents/GitHub/Savinchis_mail/src/app/%28main%29/events/editor/page.tsx"],"sourcesContent":["\r\nimport { EventEditor } from \"@/components/event-editor\";\r\n\r\n/**\r\n * Página del Editor de Eventos.\r\n * Contiene el componente cliente que gestiona la creación y edición\r\n * de eventos, incluyendo la personalización de certificados.\r\n */\r\nexport default function EventEditorPage() {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <EventEditor />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;;;AAOe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,qIAAA,CAAA,cAAW;;;;;;;;;;AAGlB","debugId":null}}]
}