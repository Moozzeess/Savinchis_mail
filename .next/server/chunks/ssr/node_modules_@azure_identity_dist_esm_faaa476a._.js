module.exports = {

"[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * Current version of the `@azure/identity` package.
 */ __turbopack_context__.s({
    "ALL_TENANTS": (()=>ALL_TENANTS),
    "AzureAuthorityHosts": (()=>AzureAuthorityHosts),
    "CACHE_CAE_SUFFIX": (()=>CACHE_CAE_SUFFIX),
    "CACHE_NON_CAE_SUFFIX": (()=>CACHE_NON_CAE_SUFFIX),
    "DEFAULT_TOKEN_CACHE_NAME": (()=>DEFAULT_TOKEN_CACHE_NAME),
    "DefaultAuthority": (()=>DefaultAuthority),
    "DefaultAuthorityHost": (()=>DefaultAuthorityHost),
    "DefaultTenantId": (()=>DefaultTenantId),
    "DeveloperSignOnClientId": (()=>DeveloperSignOnClientId),
    "SDK_VERSION": (()=>SDK_VERSION)
});
const SDK_VERSION = `4.10.1`;
const DeveloperSignOnClientId = "04b07795-8ddb-461a-bbee-02f9e1bf7b46";
const DefaultTenantId = "common";
var AzureAuthorityHosts;
(function(AzureAuthorityHosts) {
    /**
     * China-based Azure Authority Host
     */ AzureAuthorityHosts["AzureChina"] = "https://login.chinacloudapi.cn";
    /**
     * Germany-based Azure Authority Host
     *
     * @deprecated Microsoft Cloud Germany was closed on October 29th, 2021.
     *
     * */ AzureAuthorityHosts["AzureGermany"] = "https://login.microsoftonline.de";
    /**
     * US Government Azure Authority Host
     */ AzureAuthorityHosts["AzureGovernment"] = "https://login.microsoftonline.us";
    /**
     * Public Cloud Azure Authority Host
     */ AzureAuthorityHosts["AzurePublicCloud"] = "https://login.microsoftonline.com";
})(AzureAuthorityHosts || (AzureAuthorityHosts = {}));
const DefaultAuthorityHost = AzureAuthorityHosts.AzurePublicCloud;
const DefaultAuthority = "login.microsoftonline.com";
const ALL_TENANTS = [
    "*"
];
const CACHE_CAE_SUFFIX = "cae";
const CACHE_NON_CAE_SUFFIX = "nocae";
const DEFAULT_TOKEN_CACHE_NAME = "msal.cache"; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalPlugins.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "hasNativeBroker": (()=>hasNativeBroker),
    "msalNodeFlowCacheControl": (()=>msalNodeFlowCacheControl),
    "msalNodeFlowNativeBrokerControl": (()=>msalNodeFlowNativeBrokerControl),
    "msalPlugins": (()=>msalPlugins),
    "nativeBrokerInfo": (()=>nativeBrokerInfo),
    "persistenceProvider": (()=>persistenceProvider)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
;
let persistenceProvider = undefined;
const msalNodeFlowCacheControl = {
    setPersistence (pluginProvider) {
        persistenceProvider = pluginProvider;
    }
};
let nativeBrokerInfo = undefined;
function hasNativeBroker() {
    return nativeBrokerInfo !== undefined;
}
const msalNodeFlowNativeBrokerControl = {
    setNativeBroker (broker) {
        nativeBrokerInfo = {
            broker
        };
    }
};
/**
 * Configures plugins, validating that required plugins are available and enabled.
 *
 * Does not create the plugins themselves, but rather returns the configuration that will be used to create them.
 *
 * @param options - options for creating the MSAL client
 * @returns plugin configuration
 */ function generatePluginConfiguration(options) {
    var _a, _b, _c, _d, _e, _f, _g;
    const config = {
        cache: {},
        broker: {
            isEnabled: (_b = (_a = options.brokerOptions) === null || _a === void 0 ? void 0 : _a.enabled) !== null && _b !== void 0 ? _b : false,
            enableMsaPassthrough: (_d = (_c = options.brokerOptions) === null || _c === void 0 ? void 0 : _c.legacyEnableMsaPassthrough) !== null && _d !== void 0 ? _d : false,
            parentWindowHandle: (_e = options.brokerOptions) === null || _e === void 0 ? void 0 : _e.parentWindowHandle
        }
    };
    if ((_f = options.tokenCachePersistenceOptions) === null || _f === void 0 ? void 0 : _f.enabled) {
        if (persistenceProvider === undefined) {
            throw new Error([
                "Persistent token caching was requested, but no persistence provider was configured.",
                "You must install the identity-cache-persistence plugin package (`npm install --save @azure/identity-cache-persistence`)",
                "and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling",
                "`useIdentityPlugin(cachePersistencePlugin)` before using `tokenCachePersistenceOptions`."
            ].join(" "));
        }
        const cacheBaseName = options.tokenCachePersistenceOptions.name || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DEFAULT_TOKEN_CACHE_NAME"];
        config.cache.cachePlugin = persistenceProvider(Object.assign({
            name: `${cacheBaseName}.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CACHE_NON_CAE_SUFFIX"]}`
        }, options.tokenCachePersistenceOptions));
        config.cache.cachePluginCae = persistenceProvider(Object.assign({
            name: `${cacheBaseName}.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CACHE_CAE_SUFFIX"]}`
        }, options.tokenCachePersistenceOptions));
    }
    if ((_g = options.brokerOptions) === null || _g === void 0 ? void 0 : _g.enabled) {
        if (nativeBrokerInfo === undefined) {
            throw new Error([
                "Broker for WAM was requested to be enabled, but no native broker was configured.",
                "You must install the identity-broker plugin package (`npm install --save @azure/identity-broker`)",
                "and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling",
                "`useIdentityPlugin(createNativeBrokerPlugin())` before using `enableBroker`."
            ].join(" "));
        }
        config.broker.nativeBrokerPlugin = nativeBrokerInfo.broker;
    }
    return config;
}
const msalPlugins = {
    generatePluginConfiguration
}; //# sourceMappingURL=msalPlugins.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "credentialLogger": (()=>credentialLogger),
    "credentialLoggerInstance": (()=>credentialLoggerInstance),
    "formatError": (()=>formatError),
    "formatSuccess": (()=>formatSuccess),
    "logEnvVars": (()=>logEnvVars),
    "logger": (()=>logger),
    "processEnvVars": (()=>processEnvVars)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/logger/dist/esm/index.js [app-rsc] (ecmascript)");
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createClientLogger"])("identity");
function processEnvVars(supportedEnvVars) {
    return supportedEnvVars.reduce((acc, envVariable)=>{
        if (process.env[envVariable]) {
            acc.assigned.push(envVariable);
        } else {
            acc.missing.push(envVariable);
        }
        return acc;
    }, {
        missing: [],
        assigned: []
    });
}
function logEnvVars(credentialName, supportedEnvVars) {
    const { assigned } = processEnvVars(supportedEnvVars);
    logger.info(`${credentialName} => Found the following environment variables: ${assigned.join(", ")}`);
}
function formatSuccess(scope) {
    return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(", ") : scope}.`;
}
function formatError(scope, error) {
    let message = "ERROR.";
    if (scope === null || scope === void 0 ? void 0 : scope.length) {
        message += ` Scopes: ${Array.isArray(scope) ? scope.join(", ") : scope}.`;
    }
    return `${message} Error message: ${typeof error === "string" ? error : error.message}.`;
}
function credentialLoggerInstance(title, parent, log = logger) {
    const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;
    function info(message) {
        log.info(`${fullTitle} =>`, message);
    }
    function warning(message) {
        log.warning(`${fullTitle} =>`, message);
    }
    function verbose(message) {
        log.verbose(`${fullTitle} =>`, message);
    }
    function error(message) {
        log.error(`${fullTitle} =>`, message);
    }
    return {
        title,
        fullTitle,
        info,
        warning,
        verbose,
        error
    };
}
function credentialLogger(title, log = logger) {
    const credLogger = credentialLoggerInstance(title, undefined, log);
    return Object.assign(Object.assign({}, credLogger), {
        parent: log,
        getToken: credentialLoggerInstance("=> getToken()", credLogger, log)
    });
} //# sourceMappingURL=logging.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AggregateAuthenticationError": (()=>AggregateAuthenticationError),
    "AggregateAuthenticationErrorName": (()=>AggregateAuthenticationErrorName),
    "AuthenticationError": (()=>AuthenticationError),
    "AuthenticationErrorName": (()=>AuthenticationErrorName),
    "AuthenticationRequiredError": (()=>AuthenticationRequiredError),
    "CredentialUnavailableError": (()=>CredentialUnavailableError),
    "CredentialUnavailableErrorName": (()=>CredentialUnavailableErrorName)
});
function isErrorResponse(errorResponse) {
    return errorResponse && typeof errorResponse.error === "string" && typeof errorResponse.error_description === "string";
}
const CredentialUnavailableErrorName = "CredentialUnavailableError";
class CredentialUnavailableError extends Error {
    constructor(message, options){
        // @ts-expect-error - TypeScript does not recognize this until we use ES2022 as the target; however, all our major runtimes do support the `cause` property
        super(message, options);
        this.name = CredentialUnavailableErrorName;
    }
}
const AuthenticationErrorName = "AuthenticationError";
class AuthenticationError extends Error {
    constructor(statusCode, errorBody, options){
        let errorResponse = {
            error: "unknown",
            errorDescription: "An unknown error occurred and no additional details are available."
        };
        if (isErrorResponse(errorBody)) {
            errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);
        } else if (typeof errorBody === "string") {
            try {
                // Most error responses will contain JSON-formatted error details
                // in the response body
                const oauthErrorResponse = JSON.parse(errorBody);
                errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);
            } catch (e) {
                if (statusCode === 400) {
                    errorResponse = {
                        error: "invalid_request",
                        errorDescription: `The service indicated that the request was invalid.\n\n${errorBody}`
                    };
                } else {
                    errorResponse = {
                        error: "unknown_error",
                        errorDescription: `An unknown error has occurred. Response body:\n\n${errorBody}`
                    };
                }
            }
        } else {
            errorResponse = {
                error: "unknown_error",
                errorDescription: "An unknown error occurred and no additional details are available."
            };
        }
        super(`${errorResponse.error} Status code: ${statusCode}\nMore details:\n${errorResponse.errorDescription},`, // @ts-expect-error - TypeScript does not recognize this until we use ES2022 as the target; however, all our major runtimes do support the `cause` property
        options);
        this.statusCode = statusCode;
        this.errorResponse = errorResponse;
        // Ensure that this type reports the correct name
        this.name = AuthenticationErrorName;
    }
}
const AggregateAuthenticationErrorName = "AggregateAuthenticationError";
class AggregateAuthenticationError extends Error {
    constructor(errors, errorMessage){
        const errorDetail = errors.join("\n");
        super(`${errorMessage}\n${errorDetail}`);
        this.errors = errors;
        // Ensure that this type reports the correct name
        this.name = AggregateAuthenticationErrorName;
    }
}
function convertOAuthErrorResponseToErrorResponse(errorBody) {
    return {
        error: errorBody.error,
        errorDescription: errorBody.error_description,
        correlationId: errorBody.correlation_id,
        errorCodes: errorBody.error_codes,
        timestamp: errorBody.timestamp,
        traceId: errorBody.trace_id
    };
}
class AuthenticationRequiredError extends Error {
    constructor(/**
     * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.
     */ options){
        super(options.message, // @ts-expect-error - TypeScript does not recognize this until we use ES2022 as the target; however, all our major runtimes do support the `cause` property
        options.cause ? {
            cause: options.cause
        } : undefined);
        this.scopes = options.scopes;
        this.getTokenOptions = options.getTokenOptions;
        this.name = "AuthenticationRequiredError";
    }
} //# sourceMappingURL=errors.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "processMultiTenantRequest": (()=>processMultiTenantRequest)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
;
function createConfigurationErrorMessage(tenantId) {
    return `The current credential is not configured to acquire tokens for tenant ${tenantId}. To enable acquiring tokens for this tenant add it to the AdditionallyAllowedTenants on the credential options, or add "*" to AdditionallyAllowedTenants to allow acquiring tokens for any tenant.`;
}
function processMultiTenantRequest(tenantId, getTokenOptions, additionallyAllowedTenantIds = [], logger) {
    var _a;
    let resolvedTenantId;
    if (process.env.AZURE_IDENTITY_DISABLE_MULTITENANTAUTH) {
        resolvedTenantId = tenantId;
    } else if (tenantId === "adfs") {
        resolvedTenantId = tenantId;
    } else {
        resolvedTenantId = (_a = getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId) !== null && _a !== void 0 ? _a : tenantId;
    }
    if (tenantId && resolvedTenantId !== tenantId && !additionallyAllowedTenantIds.includes("*") && !additionallyAllowedTenantIds.some((t)=>t.localeCompare(resolvedTenantId) === 0)) {
        const message = createConfigurationErrorMessage(resolvedTenantId);
        logger === null || logger === void 0 ? void 0 : logger.info(message);
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](message);
    }
    return resolvedTenantId;
} //# sourceMappingURL=processMultiTenantRequest.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "checkTenantId": (()=>checkTenantId),
    "resolveAdditionallyAllowedTenantIds": (()=>resolveAdditionallyAllowedTenantIds),
    "resolveTenantId": (()=>resolveTenantId)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
;
;
;
function checkTenantId(logger, tenantId) {
    if (!tenantId.match(/^[0-9a-zA-Z-.]+$/)) {
        const error = new Error("Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://learn.microsoft.com/partner-center/find-ids-and-domain-names.");
        logger.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])("", error));
        throw error;
    }
}
function resolveTenantId(logger, tenantId, clientId) {
    if (tenantId) {
        checkTenantId(logger, tenantId);
        return tenantId;
    }
    if (!clientId) {
        clientId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DeveloperSignOnClientId"];
    }
    if (clientId !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DeveloperSignOnClientId"]) {
        return "common";
    }
    return "organizations";
}
function resolveAdditionallyAllowedTenantIds(additionallyAllowedTenants) {
    if (!additionallyAllowedTenants || additionallyAllowedTenants.length === 0) {
        return [];
    }
    if (additionallyAllowedTenants.includes("*")) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ALL_TENANTS"];
    }
    return additionallyAllowedTenants;
} //# sourceMappingURL=tenantIdUtils.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/identityTokenEndpoint.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getIdentityTokenEndpointSuffix": (()=>getIdentityTokenEndpointSuffix)
});
function getIdentityTokenEndpointSuffix(tenantId) {
    if (tenantId === "adfs") {
        return "oauth2/token";
    } else {
        return "oauth2/v2.0/token";
    }
} //# sourceMappingURL=identityTokenEndpoint.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "tracingClient": (()=>tracingClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/tracingClient.js [app-rsc] (ecmascript)");
;
;
const tracingClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createTracingClient"])({
    namespace: "Microsoft.AAD",
    packageName: "@azure/identity",
    packageVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SDK_VERSION"]
}); //# sourceMappingURL=tracing.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/utils.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "mapScopesToResource": (()=>mapScopesToResource),
    "parseExpirationTimestamp": (()=>parseExpirationTimestamp),
    "parseRefreshTimestamp": (()=>parseRefreshTimestamp),
    "serviceFabricErrorMessage": (()=>serviceFabricErrorMessage)
});
const DefaultScopeSuffix = "/.default";
const serviceFabricErrorMessage = "Specifying a `clientId` or `resourceId` is not supported by the Service Fabric managed identity environment. The managed identity configuration is determined by the Service Fabric cluster resource configuration. See https://aka.ms/servicefabricmi for more information";
function mapScopesToResource(scopes) {
    let scope = "";
    if (Array.isArray(scopes)) {
        if (scopes.length !== 1) {
            return;
        }
        scope = scopes[0];
    } else if (typeof scopes === "string") {
        scope = scopes;
    }
    if (!scope.endsWith(DefaultScopeSuffix)) {
        return scope;
    }
    return scope.substr(0, scope.lastIndexOf(DefaultScopeSuffix));
}
function parseExpirationTimestamp(body) {
    if (typeof body.expires_on === "number") {
        return body.expires_on * 1000;
    }
    if (typeof body.expires_on === "string") {
        const asNumber = +body.expires_on;
        if (!isNaN(asNumber)) {
            return asNumber * 1000;
        }
        const asDate = Date.parse(body.expires_on);
        if (!isNaN(asDate)) {
            return asDate;
        }
    }
    if (typeof body.expires_in === "number") {
        return Date.now() + body.expires_in * 1000;
    }
    throw new Error(`Failed to parse token expiration from body. expires_in="${body.expires_in}", expires_on="${body.expires_on}"`);
}
function parseRefreshTimestamp(body) {
    if (body.refresh_on) {
        if (typeof body.refresh_on === "number") {
            return body.refresh_on * 1000;
        }
        if (typeof body.refresh_on === "string") {
            const asNumber = +body.refresh_on;
            if (!isNaN(asNumber)) {
                return asNumber * 1000;
            }
            const asDate = Date.parse(body.refresh_on);
            if (!isNaN(asDate)) {
                return asDate;
            }
        }
        throw new Error(`Failed to parse refresh_on from body. refresh_on="${body.refresh_on}"`);
    } else {
        return undefined;
    }
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/client/identityClient.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "IdentityClient": (()=>IdentityClient),
    "getIdentityClientAuthorityHost": (()=>getIdentityClientAuthorityHost)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serviceClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serviceClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$identityTokenEndpoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/identityTokenEndpoint.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/utils.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
const noCorrelationId = "noCorrelationId";
function getIdentityClientAuthorityHost(options) {
    // The authorityHost can come from options or from the AZURE_AUTHORITY_HOST environment variable.
    let authorityHost = options === null || options === void 0 ? void 0 : options.authorityHost;
    // The AZURE_AUTHORITY_HOST environment variable can only be provided in Node.js.
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isNode"]) {
        authorityHost = authorityHost !== null && authorityHost !== void 0 ? authorityHost : process.env.AZURE_AUTHORITY_HOST;
    }
    // If the authorityHost is not provided, we use the default one from the public cloud: https://login.microsoftonline.com
    return authorityHost !== null && authorityHost !== void 0 ? authorityHost : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DefaultAuthorityHost"];
}
class IdentityClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serviceClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ServiceClient"] {
    constructor(options){
        var _a, _b;
        const packageDetails = `azsdk-js-identity/${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SDK_VERSION"]}`;
        const userAgentPrefix = ((_a = options === null || options === void 0 ? void 0 : options.userAgentOptions) === null || _a === void 0 ? void 0 : _a.userAgentPrefix) ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
        const baseUri = getIdentityClientAuthorityHost(options);
        if (!baseUri.startsWith("https:")) {
            throw new Error("The authorityHost address must use the 'https' protocol.");
        }
        super(Object.assign(Object.assign({
            requestContentType: "application/json; charset=utf-8",
            retryOptions: {
                maxRetries: 3
            }
        }, options), {
            userAgentOptions: {
                userAgentPrefix
            },
            baseUri
        }));
        this.allowInsecureConnection = false;
        this.authorityHost = baseUri;
        this.abortControllers = new Map();
        this.allowLoggingAccountIdentifiers = (_b = options === null || options === void 0 ? void 0 : options.loggingOptions) === null || _b === void 0 ? void 0 : _b.allowLoggingAccountIdentifiers;
        // used for WorkloadIdentity
        this.tokenCredentialOptions = Object.assign({}, options);
        // used for ManagedIdentity
        if (options === null || options === void 0 ? void 0 : options.allowInsecureConnection) {
            this.allowInsecureConnection = options.allowInsecureConnection;
        }
    }
    async sendTokenRequest(request) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].info(`IdentityClient: sending token request to [${request.url}]`);
        const response = await this.sendRequest(request);
        if (response.bodyAsText && (response.status === 200 || response.status === 201)) {
            const parsedBody = JSON.parse(response.bodyAsText);
            if (!parsedBody.access_token) {
                return null;
            }
            this.logIdentifiers(response);
            const token = {
                accessToken: {
                    token: parsedBody.access_token,
                    expiresOnTimestamp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parseExpirationTimestamp"])(parsedBody),
                    refreshAfterTimestamp: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parseRefreshTimestamp"])(parsedBody),
                    tokenType: "Bearer"
                },
                refreshToken: parsedBody.refresh_token
            };
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].info(`IdentityClient: [${request.url}] token acquired, expires on ${token.accessToken.expiresOnTimestamp}`);
            return token;
        } else {
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationError"](response.status, response.bodyAsText);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].warning(`IdentityClient: authentication error. HTTP status: ${response.status}, ${error.errorResponse.errorDescription}`);
            throw error;
        }
    }
    async refreshAccessToken(tenantId, clientId, scopes, refreshToken, clientSecret, options = {}) {
        if (refreshToken === undefined) {
            return null;
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].info(`IdentityClient: refreshing access token with client ID: ${clientId}, scopes: ${scopes} started`);
        const refreshParams = {
            grant_type: "refresh_token",
            client_id: clientId,
            refresh_token: refreshToken,
            scope: scopes
        };
        if (clientSecret !== undefined) {
            refreshParams.client_secret = clientSecret;
        }
        const query = new URLSearchParams(refreshParams);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan("IdentityClient.refreshAccessToken", options, async (updatedOptions)=>{
            try {
                const urlSuffix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$identityTokenEndpoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getIdentityTokenEndpointSuffix"])(tenantId);
                const request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createPipelineRequest"])({
                    url: `${this.authorityHost}/${tenantId}/${urlSuffix}`,
                    method: "POST",
                    body: query.toString(),
                    abortSignal: options.abortSignal,
                    headers: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createHttpHeaders"])({
                        Accept: "application/json",
                        "Content-Type": "application/x-www-form-urlencoded"
                    }),
                    tracingOptions: updatedOptions.tracingOptions
                });
                const response = await this.sendTokenRequest(request);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].info(`IdentityClient: refreshed token for client ID: ${clientId}`);
                return response;
            } catch (err) {
                if (err.name === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationErrorName"] && err.errorResponse.error === "interaction_required") {
                    // It's likely that the refresh token has expired, so
                    // return null so that the credential implementation will
                    // initiate the authentication flow again.
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].info(`IdentityClient: interaction required for client ID: ${clientId}`);
                    return null;
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].warning(`IdentityClient: failed refreshing token for client ID: ${clientId}: ${err}`);
                    throw err;
                }
            }
        });
    }
    // Here is a custom layer that allows us to abort requests that go through MSAL,
    // since MSAL doesn't allow us to pass options all the way through.
    generateAbortSignal(correlationId) {
        const controller = new AbortController();
        const controllers = this.abortControllers.get(correlationId) || [];
        controllers.push(controller);
        this.abortControllers.set(correlationId, controllers);
        const existingOnAbort = controller.signal.onabort;
        controller.signal.onabort = (...params)=>{
            this.abortControllers.set(correlationId, undefined);
            if (existingOnAbort) {
                existingOnAbort.apply(controller.signal, params);
            }
        };
        return controller.signal;
    }
    abortRequests(correlationId) {
        const key = correlationId || noCorrelationId;
        const controllers = [
            ...this.abortControllers.get(key) || [],
            // MSAL passes no correlation ID to the get requests...
            ...this.abortControllers.get(noCorrelationId) || []
        ];
        if (!controllers.length) {
            return;
        }
        for (const controller of controllers){
            controller.abort();
        }
        this.abortControllers.set(key, undefined);
    }
    getCorrelationId(options) {
        var _a;
        const parameter = (_a = options === null || options === void 0 ? void 0 : options.body) === null || _a === void 0 ? void 0 : _a.split("&").map((part)=>part.split("=")).find(([key])=>key === "client-request-id");
        return parameter && parameter.length ? parameter[1] || noCorrelationId : noCorrelationId;
    }
    // The MSAL network module methods follow
    async sendGetRequestAsync(url, options) {
        const request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createPipelineRequest"])({
            url,
            method: "GET",
            body: options === null || options === void 0 ? void 0 : options.body,
            allowInsecureConnection: this.allowInsecureConnection,
            headers: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createHttpHeaders"])(options === null || options === void 0 ? void 0 : options.headers),
            abortSignal: this.generateAbortSignal(noCorrelationId)
        });
        const response = await this.sendRequest(request);
        this.logIdentifiers(response);
        return {
            body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,
            headers: response.headers.toJSON(),
            status: response.status
        };
    }
    async sendPostRequestAsync(url, options) {
        const request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createPipelineRequest"])({
            url,
            method: "POST",
            body: options === null || options === void 0 ? void 0 : options.body,
            headers: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createHttpHeaders"])(options === null || options === void 0 ? void 0 : options.headers),
            allowInsecureConnection: this.allowInsecureConnection,
            // MSAL doesn't send the correlation ID on the get requests.
            abortSignal: this.generateAbortSignal(this.getCorrelationId(options))
        });
        const response = await this.sendRequest(request);
        this.logIdentifiers(response);
        return {
            body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,
            headers: response.headers.toJSON(),
            status: response.status
        };
    }
    /**
     *
     * @internal
     */ getTokenCredentialOptions() {
        return this.tokenCredentialOptions;
    }
    /**
     * If allowLoggingAccountIdentifiers was set on the constructor options
     * we try to log the account identifiers by parsing the received access token.
     *
     * The account identifiers we try to log are:
     * - `appid`: The application or Client Identifier.
     * - `upn`: User Principal Name.
     *   - It might not be available in some authentication scenarios.
     *   - If it's not available, we put a placeholder: "No User Principal Name available".
     * - `tid`: Tenant Identifier.
     * - `oid`: Object Identifier of the authenticated user.
     */ logIdentifiers(response) {
        if (!this.allowLoggingAccountIdentifiers || !response.bodyAsText) {
            return;
        }
        const unavailableUpn = "No User Principal Name available";
        try {
            const parsed = response.parsedBody || JSON.parse(response.bodyAsText);
            const accessToken = parsed.access_token;
            if (!accessToken) {
                // Without an access token allowLoggingAccountIdentifiers isn't useful.
                return;
            }
            const base64Metadata = accessToken.split(".")[1];
            const { appid, upn, tid, oid } = JSON.parse(Buffer.from(base64Metadata, "base64").toString("utf8"));
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].info(`[Authenticated account] Client ID: ${appid}. Tenant ID: ${tid}. User Principal Name: ${upn || unavailableUpn}. Object ID (user): ${oid}`);
        } catch (e) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["logger"].warning("allowLoggingAccountIdentifiers was set, but we couldn't log the account information. Error:", e.message);
        }
    }
} //# sourceMappingURL=identityClient.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/visualStudioCodeCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "VisualStudioCodeCredential": (()=>VisualStudioCodeCredential),
    "getPropertyFromVSCode": (()=>getPropertyFromVSCode),
    "vsCodeCredentialControl": (()=>vsCodeCredentialControl)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/client/identityClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs [external] (node:fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$os__$5b$external$5d$__$28$node$3a$os$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:os [external] (node:os, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
;
;
;
;
;
;
;
;
;
const CommonTenantId = "common";
const AzureAccountClientId = "aebc6443-996d-45c2-90f0-388ff96faa56"; // VSC: 'aebc6443-996d-45c2-90f0-388ff96faa56'
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("VisualStudioCodeCredential");
let findCredentials = undefined;
const vsCodeCredentialControl = {
    setVsCodeCredentialFinder (finder) {
        findCredentials = finder;
    }
};
// Map of unsupported Tenant IDs and the errors we will be throwing.
const unsupportedTenantIds = {
    adfs: "The VisualStudioCodeCredential does not support authentication with ADFS tenants."
};
function checkUnsupportedTenant(tenantId) {
    // If the Tenant ID isn't supported, we throw.
    const unsupportedTenantError = unsupportedTenantIds[tenantId];
    if (unsupportedTenantError) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](unsupportedTenantError);
    }
}
const mapVSCodeAuthorityHosts = {
    AzureCloud: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AzureAuthorityHosts"].AzurePublicCloud,
    AzureChina: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AzureAuthorityHosts"].AzureChina,
    AzureGermanCloud: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AzureAuthorityHosts"].AzureGermany,
    AzureUSGovernment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AzureAuthorityHosts"].AzureGovernment
};
function getPropertyFromVSCode(property) {
    const settingsPath = [
        "User",
        "settings.json"
    ];
    // Eventually we can add more folders for more versions of VSCode.
    const vsCodeFolder = "Code";
    const homedir = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$os__$5b$external$5d$__$28$node$3a$os$2c$__cjs$29$__["default"].homedir();
    function loadProperty(...pathSegments) {
        const fullPath = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["default"].join(...pathSegments, vsCodeFolder, ...settingsPath);
        const settings = JSON.parse(__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["default"].readFileSync(fullPath, {
            encoding: "utf8"
        }));
        return settings[property];
    }
    try {
        let appData;
        switch(process.platform){
            case "win32":
                appData = process.env.APPDATA;
                return appData ? loadProperty(appData) : undefined;
            case "darwin":
                return loadProperty(homedir, "Library", "Application Support");
            case "linux":
                return loadProperty(homedir, ".config");
            default:
                return;
        }
    } catch (e) {
        logger.info(`Failed to load the Visual Studio Code configuration file. Error: ${e.message}`);
        return;
    }
}
class VisualStudioCodeCredential {
    /**
     * Creates an instance of VisualStudioCodeCredential to use for automatically authenticating via VSCode.
     *
     * **Note**: `VisualStudioCodeCredential` is provided by a plugin package:
     * `@azure/identity-vscode`. If this package is not installed and registered
     * using the plugin API (`useIdentityPlugin`), then authentication using
     * `VisualStudioCodeCredential` will not be available.
     *
     * @param options - Options for configuring the client which makes the authentication request.
     */ constructor(options){
        // We want to make sure we use the one assigned by the user on the VSCode settings.
        // Or just `AzureCloud` by default.
        this.cloudName = getPropertyFromVSCode("azure.cloud") || "AzureCloud";
        // Picking an authority host based on the cloud name.
        const authorityHost = mapVSCodeAuthorityHosts[this.cloudName];
        this.identityClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["IdentityClient"](Object.assign({
            authorityHost
        }, options));
        if (options && options.tenantId) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, options.tenantId);
            this.tenantId = options.tenantId;
        } else {
            this.tenantId = CommonTenantId;
        }
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        checkUnsupportedTenant(this.tenantId);
    }
    /**
     * Runs preparations for any further getToken request.
     */ async prepare() {
        // Attempts to load the tenant from the VSCode configuration file.
        const settingsTenant = getPropertyFromVSCode("azure.tenant");
        if (settingsTenant) {
            this.tenantId = settingsTenant;
        }
        checkUnsupportedTenant(this.tenantId);
    }
    /**
     * Runs preparations for any further getToken, but only once.
     */ prepareOnce() {
        if (!this.preparePromise) {
            this.preparePromise = this.prepare();
        }
        return this.preparePromise;
    }
    /**
     * Returns the token found by searching VSCode's authentication cache or
     * returns null if no token could be found.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                `TokenCredential` implementation might make.
     */ async getToken(scopes, options) {
        var _a, _b;
        await this.prepareOnce();
        const tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, options, this.additionallyAllowedTenantIds, logger) || this.tenantId;
        if (findCredentials === undefined) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]([
                "No implementation of `VisualStudioCodeCredential` is available.",
                "You must install the identity-vscode plugin package (`npm install --save-dev @azure/identity-vscode`)",
                "and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling",
                "`useIdentityPlugin(vsCodePlugin)` before creating a `VisualStudioCodeCredential`.",
                "To troubleshoot, visit https://aka.ms/azsdk/js/identity/vscodecredential/troubleshoot."
            ].join(" "));
        }
        let scopeString = typeof scopes === "string" ? scopes : scopes.join(" ");
        // Check to make sure the scope we get back is a valid scope
        if (!scopeString.match(/^[0-9a-zA-Z-.:/]+$/)) {
            const error = new Error("Invalid scope was specified by the user or calling client");
            logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
            throw error;
        }
        if (scopeString.indexOf("offline_access") < 0) {
            scopeString += " offline_access";
        }
        // findCredentials returns an array similar to:
        // [
        //   {
        //     account: "",
        //     password: "",
        //   },
        //   /* ... */
        // ]
        const credentials = await findCredentials();
        // If we can't find the credential based on the name, we'll pick the first one available.
        const { password: refreshToken } = (_b = (_a = credentials.find(({ account })=>account === this.cloudName)) !== null && _a !== void 0 ? _a : credentials[0]) !== null && _b !== void 0 ? _b : {};
        if (refreshToken) {
            const tokenResponse = await this.identityClient.refreshAccessToken(tenantId, AzureAccountClientId, scopeString, refreshToken, undefined);
            if (tokenResponse) {
                logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
                return tokenResponse.accessToken;
            } else {
                const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("Could not retrieve the token associated with Visual Studio Code. Have you connected using the 'Azure Account' extension recently? To troubleshoot, visit https://aka.ms/azsdk/js/identity/vscodecredential/troubleshoot.");
                logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
                throw error;
            }
        } else {
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("Could not retrieve the token associated with Visual Studio Code. Did you connect using the 'Azure Account' extension? To troubleshoot, visit https://aka.ms/azsdk/js/identity/vscodecredential/troubleshoot.");
            logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
            throw error;
        }
    }
} //# sourceMappingURL=visualStudioCodeCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/plugins/consumer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "useIdentityPlugin": (()=>useIdentityPlugin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalPlugins$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalPlugins.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$visualStudioCodeCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/visualStudioCodeCredential.js [app-rsc] (ecmascript)");
;
;
/**
 * The context passed to an Identity plugin. This contains objects that
 * plugins can use to set backend implementations.
 * @internal
 */ const pluginContext = {
    cachePluginControl: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalPlugins$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["msalNodeFlowCacheControl"],
    nativeBrokerPluginControl: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalPlugins$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["msalNodeFlowNativeBrokerControl"],
    vsCodeCredentialControl: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$visualStudioCodeCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["vsCodeCredentialControl"]
};
function useIdentityPlugin(plugin) {
    plugin(pluginContext);
} //# sourceMappingURL=consumer.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/msal/msal.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/msal-node/dist/index.mjs [app-rsc] (ecmascript) <module evaluation>");
;
;
 //# sourceMappingURL=msal.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/msal/msal.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/msal-node/dist/index.mjs [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$msal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/msal.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/@azure/identity/dist/esm/msal/utils.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "defaultLoggerCallback": (()=>defaultLoggerCallback),
    "deserializeAuthenticationRecord": (()=>deserializeAuthenticationRecord),
    "ensureValidMsalToken": (()=>ensureValidMsalToken),
    "getAuthority": (()=>getAuthority),
    "getAuthorityHost": (()=>getAuthorityHost),
    "getKnownAuthorities": (()=>getKnownAuthorities),
    "getMSALLogLevel": (()=>getMSALLogLevel),
    "handleMsalError": (()=>handleMsalError),
    "msalToPublic": (()=>msalToPublic),
    "publicToMsal": (()=>publicToMsal),
    "randomUUID": (()=>randomUUID),
    "serializeAuthenticationRecord": (()=>serializeAuthenticationRecord)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/abort-controller/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$AbortError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/abort-controller/dist/esm/AbortError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$msal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/msal.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/msal-node/dist/index.mjs [app-rsc] (ecmascript) <export * as msalCommon>");
;
;
;
;
;
;
/**
 * @internal
 */ const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("IdentityUtils");
/**
 * Latest AuthenticationRecord version
 * @internal
 */ const LatestAuthenticationRecordVersion = "1.0";
function ensureValidMsalToken(scopes, msalToken, getTokenOptions) {
    const error = (message)=>{
        logger.getToken.info(message);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationRequiredError"]({
            scopes: Array.isArray(scopes) ? scopes : [
                scopes
            ],
            getTokenOptions,
            message
        });
    };
    if (!msalToken) {
        throw error("No response");
    }
    if (!msalToken.expiresOn) {
        throw error(`Response had no "expiresOn" property.`);
    }
    if (!msalToken.accessToken) {
        throw error(`Response had no "accessToken" property.`);
    }
}
function getAuthorityHost(options) {
    let authorityHost = options === null || options === void 0 ? void 0 : options.authorityHost;
    if (!authorityHost && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isNodeLike"]) {
        authorityHost = process.env.AZURE_AUTHORITY_HOST;
    }
    return authorityHost !== null && authorityHost !== void 0 ? authorityHost : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DefaultAuthorityHost"];
}
function getAuthority(tenantId, host) {
    if (!host) {
        host = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DefaultAuthorityHost"];
    }
    if (new RegExp(`${tenantId}/?$`).test(host)) {
        return host;
    }
    if (host.endsWith("/")) {
        return host + tenantId;
    } else {
        return `${host}/${tenantId}`;
    }
}
function getKnownAuthorities(tenantId, authorityHost, disableInstanceDiscovery) {
    if (tenantId === "adfs" && authorityHost || disableInstanceDiscovery) {
        return [
            authorityHost
        ];
    }
    return [];
}
const defaultLoggerCallback = (credLogger, platform = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isNode"] ? "Node" : "Browser")=>(level, message, containsPii)=>{
        if (containsPii) {
            return;
        }
        switch(level){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Error:
                credLogger.info(`MSAL ${platform} V2 error: ${message}`);
                return;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Info:
                credLogger.info(`MSAL ${platform} V2 info message: ${message}`);
                return;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Verbose:
                credLogger.info(`MSAL ${platform} V2 verbose message: ${message}`);
                return;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Warning:
                credLogger.info(`MSAL ${platform} V2 warning: ${message}`);
                return;
        }
    };
function getMSALLogLevel(logLevel) {
    switch(logLevel){
        case "error":
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Error;
        case "info":
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Info;
        case "verbose":
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Verbose;
        case "warning":
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Warning;
        default:
            // default msal logging level should be Info
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__msalCommon$3e$__["msalCommon"].LogLevel.Info;
    }
}
function randomUUID() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["randomUUID"])();
}
function handleMsalError(scopes, error, getTokenOptions) {
    if (error.name === "AuthError" || error.name === "ClientAuthError" || error.name === "BrowserAuthError") {
        const msalError = error;
        switch(msalError.errorCode){
            case "endpoints_resolution_error":
                logger.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error.message));
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](error.message);
            case "device_code_polling_cancelled":
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$AbortError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AbortError"]("The authentication has been aborted by the caller.");
            case "consent_required":
            case "interaction_required":
            case "login_required":
                logger.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, `Authentication returned errorCode ${msalError.errorCode}`));
                break;
            default:
                logger.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, `Failed to acquire token: ${error.message}`));
                break;
        }
    }
    if (error.name === "ClientConfigurationError" || error.name === "BrowserConfigurationAuthError" || error.name === "AbortError" || error.name === "AuthenticationError") {
        return error;
    }
    if (error.name === "NativeAuthError") {
        logger.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, `Error from the native broker: ${error.message} with status code: ${error.statusCode}`));
        return error;
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationRequiredError"]({
        scopes,
        getTokenOptions,
        message: error.message
    });
}
function publicToMsal(account) {
    return {
        localAccountId: account.homeAccountId,
        environment: account.authority,
        username: account.username,
        homeAccountId: account.homeAccountId,
        tenantId: account.tenantId
    };
}
function msalToPublic(clientId, account) {
    var _a;
    const record = {
        authority: (_a = account.environment) !== null && _a !== void 0 ? _a : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DefaultAuthority"],
        homeAccountId: account.homeAccountId,
        tenantId: account.tenantId || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DefaultTenantId"],
        username: account.username,
        clientId,
        version: LatestAuthenticationRecordVersion
    };
    return record;
}
function serializeAuthenticationRecord(record) {
    return JSON.stringify(record);
}
function deserializeAuthenticationRecord(serializedRecord) {
    const parsed = JSON.parse(serializedRecord);
    if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {
        throw Error("Unsupported AuthenticationRecord version");
    }
    return parsed;
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/imdsRetryPolicy.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "imdsRetryPolicy": (()=>imdsRetryPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$retryPolicy$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-rsc] (ecmascript) <locals>");
;
;
// Matches the default retry configuration in expontentialRetryStrategy.ts
const DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;
function imdsRetryPolicy(msiRetryConfig) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$retryPolicy$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["retryPolicy"])([
        {
            name: "imdsRetryPolicy",
            retry: ({ retryCount, response })=>{
                if ((response === null || response === void 0 ? void 0 : response.status) !== 404) {
                    return {
                        skipStrategy: true
                    };
                }
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["calculateRetryDelay"])(retryCount, {
                    retryDelayInMs: msiRetryConfig.startDelayInMs,
                    maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL
                });
            }
        }
    ], {
        maxRetries: msiRetryConfig.maxRetries
    });
} //# sourceMappingURL=imdsRetryPolicy.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/imdsMsi.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "imdsMsi": (()=>imdsMsi)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/utils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
;
;
const msiName = "ManagedIdentityCredential - IMDS";
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])(msiName);
const imdsHost = "http://169.254.169.254";
const imdsEndpointPath = "/metadata/identity/oauth2/token";
/**
 * Generates an invalid request options to get a response quickly from IMDS endpoint.
 * The response indicates the availability of IMSD service; otherwise the request would time out.
 */ function prepareInvalidRequestOptions(scopes) {
    var _a;
    const resource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mapScopesToResource"])(scopes);
    if (!resource) {
        throw new Error(`${msiName}: Multiple scopes are not supported.`);
    }
    // Pod Identity will try to process this request even if the Metadata header is missing.
    // We can exclude the request query to ensure no IMDS endpoint tries to process the ping request.
    const url = new URL(imdsEndpointPath, (_a = process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST) !== null && _a !== void 0 ? _a : imdsHost);
    const rawHeaders = {
        Accept: "application/json"
    };
    return {
        // intentionally not including any query
        url: `${url}`,
        method: "GET",
        headers: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createHttpHeaders"])(rawHeaders)
    };
}
const imdsMsi = {
    name: "imdsMsi",
    async isAvailable (options) {
        const { scopes, identityClient, getTokenOptions } = options;
        const resource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mapScopesToResource"])(scopes);
        if (!resource) {
            logger.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);
            return false;
        }
        // if the PodIdentityEndpoint environment variable was set no need to probe the endpoint, it can be assumed to exist
        if (process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST) {
            return true;
        }
        if (!identityClient) {
            throw new Error("Missing IdentityClient");
        }
        const requestOptions = prepareInvalidRequestOptions(resource);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan("ManagedIdentityCredential-pingImdsEndpoint", getTokenOptions !== null && getTokenOptions !== void 0 ? getTokenOptions : {}, async (updatedOptions)=>{
            var _a, _b;
            requestOptions.tracingOptions = updatedOptions.tracingOptions;
            // Create a request with a timeout since we expect that
            // not having a "Metadata" header should cause an error to be
            // returned quickly from the endpoint, proving its availability.
            const request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createPipelineRequest"])(requestOptions);
            // Default to 1000 if the default of 0 is used.
            // Negative values can still be used to disable the timeout.
            request.timeout = ((_a = updatedOptions.requestOptions) === null || _a === void 0 ? void 0 : _a.timeout) || 1000;
            // This MSI uses the imdsEndpoint to get the token, which only uses http://
            request.allowInsecureConnection = true;
            let response;
            try {
                logger.info(`${msiName}: Pinging the Azure IMDS endpoint`);
                response = await identityClient.sendRequest(request);
            } catch (err) {
                // If the request failed, or Node.js was unable to establish a connection,
                // or the host was down, we'll assume the IMDS endpoint isn't available.
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isError"])(err)) {
                    logger.verbose(`${msiName}: Caught error ${err.name}: ${err.message}`);
                }
                // This is a special case for Docker Desktop which responds with a 403 with a message that contains "A socket operation was attempted to an unreachable network" or "A socket operation was attempted to an unreachable host"
                // rather than just timing out, as expected.
                logger.info(`${msiName}: The Azure IMDS endpoint is unavailable`);
                return false;
            }
            if (response.status === 403) {
                if ((_b = response.bodyAsText) === null || _b === void 0 ? void 0 : _b.includes("unreachable")) {
                    logger.info(`${msiName}: The Azure IMDS endpoint is unavailable`);
                    logger.info(`${msiName}: ${response.bodyAsText}`);
                    return false;
                }
            }
            // If we received any response, the endpoint is available
            logger.info(`${msiName}: The Azure IMDS endpoint is available`);
            return true;
        });
    }
}; //# sourceMappingURL=imdsMsi.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/regionalAuthority.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * Helps specify a regional authority, or "AutoDiscoverRegion" to auto-detect the region.
 */ __turbopack_context__.s({
    "RegionalAuthority": (()=>RegionalAuthority),
    "calculateRegionalAuthority": (()=>calculateRegionalAuthority)
});
var RegionalAuthority;
(function(RegionalAuthority) {
    /** Instructs MSAL to attempt to discover the region */ RegionalAuthority["AutoDiscoverRegion"] = "AutoDiscoverRegion";
    /** Uses the {@link RegionalAuthority} for the Azure 'westus' region. */ RegionalAuthority["USWest"] = "westus";
    /** Uses the {@link RegionalAuthority} for the Azure 'westus2' region. */ RegionalAuthority["USWest2"] = "westus2";
    /** Uses the {@link RegionalAuthority} for the Azure 'centralus' region. */ RegionalAuthority["USCentral"] = "centralus";
    /** Uses the {@link RegionalAuthority} for the Azure 'eastus' region. */ RegionalAuthority["USEast"] = "eastus";
    /** Uses the {@link RegionalAuthority} for the Azure 'eastus2' region. */ RegionalAuthority["USEast2"] = "eastus2";
    /** Uses the {@link RegionalAuthority} for the Azure 'northcentralus' region. */ RegionalAuthority["USNorthCentral"] = "northcentralus";
    /** Uses the {@link RegionalAuthority} for the Azure 'southcentralus' region. */ RegionalAuthority["USSouthCentral"] = "southcentralus";
    /** Uses the {@link RegionalAuthority} for the Azure 'westcentralus' region. */ RegionalAuthority["USWestCentral"] = "westcentralus";
    /** Uses the {@link RegionalAuthority} for the Azure 'canadacentral' region. */ RegionalAuthority["CanadaCentral"] = "canadacentral";
    /** Uses the {@link RegionalAuthority} for the Azure 'canadaeast' region. */ RegionalAuthority["CanadaEast"] = "canadaeast";
    /** Uses the {@link RegionalAuthority} for the Azure 'brazilsouth' region. */ RegionalAuthority["BrazilSouth"] = "brazilsouth";
    /** Uses the {@link RegionalAuthority} for the Azure 'northeurope' region. */ RegionalAuthority["EuropeNorth"] = "northeurope";
    /** Uses the {@link RegionalAuthority} for the Azure 'westeurope' region. */ RegionalAuthority["EuropeWest"] = "westeurope";
    /** Uses the {@link RegionalAuthority} for the Azure 'uksouth' region. */ RegionalAuthority["UKSouth"] = "uksouth";
    /** Uses the {@link RegionalAuthority} for the Azure 'ukwest' region. */ RegionalAuthority["UKWest"] = "ukwest";
    /** Uses the {@link RegionalAuthority} for the Azure 'francecentral' region. */ RegionalAuthority["FranceCentral"] = "francecentral";
    /** Uses the {@link RegionalAuthority} for the Azure 'francesouth' region. */ RegionalAuthority["FranceSouth"] = "francesouth";
    /** Uses the {@link RegionalAuthority} for the Azure 'switzerlandnorth' region. */ RegionalAuthority["SwitzerlandNorth"] = "switzerlandnorth";
    /** Uses the {@link RegionalAuthority} for the Azure 'switzerlandwest' region. */ RegionalAuthority["SwitzerlandWest"] = "switzerlandwest";
    /** Uses the {@link RegionalAuthority} for the Azure 'germanynorth' region. */ RegionalAuthority["GermanyNorth"] = "germanynorth";
    /** Uses the {@link RegionalAuthority} for the Azure 'germanywestcentral' region. */ RegionalAuthority["GermanyWestCentral"] = "germanywestcentral";
    /** Uses the {@link RegionalAuthority} for the Azure 'norwaywest' region. */ RegionalAuthority["NorwayWest"] = "norwaywest";
    /** Uses the {@link RegionalAuthority} for the Azure 'norwayeast' region. */ RegionalAuthority["NorwayEast"] = "norwayeast";
    /** Uses the {@link RegionalAuthority} for the Azure 'eastasia' region. */ RegionalAuthority["AsiaEast"] = "eastasia";
    /** Uses the {@link RegionalAuthority} for the Azure 'southeastasia' region. */ RegionalAuthority["AsiaSouthEast"] = "southeastasia";
    /** Uses the {@link RegionalAuthority} for the Azure 'japaneast' region. */ RegionalAuthority["JapanEast"] = "japaneast";
    /** Uses the {@link RegionalAuthority} for the Azure 'japanwest' region. */ RegionalAuthority["JapanWest"] = "japanwest";
    /** Uses the {@link RegionalAuthority} for the Azure 'australiaeast' region. */ RegionalAuthority["AustraliaEast"] = "australiaeast";
    /** Uses the {@link RegionalAuthority} for the Azure 'australiasoutheast' region. */ RegionalAuthority["AustraliaSouthEast"] = "australiasoutheast";
    /** Uses the {@link RegionalAuthority} for the Azure 'australiacentral' region. */ RegionalAuthority["AustraliaCentral"] = "australiacentral";
    /** Uses the {@link RegionalAuthority} for the Azure 'australiacentral2' region. */ RegionalAuthority["AustraliaCentral2"] = "australiacentral2";
    /** Uses the {@link RegionalAuthority} for the Azure 'centralindia' region. */ RegionalAuthority["IndiaCentral"] = "centralindia";
    /** Uses the {@link RegionalAuthority} for the Azure 'southindia' region. */ RegionalAuthority["IndiaSouth"] = "southindia";
    /** Uses the {@link RegionalAuthority} for the Azure 'westindia' region. */ RegionalAuthority["IndiaWest"] = "westindia";
    /** Uses the {@link RegionalAuthority} for the Azure 'koreasouth' region. */ RegionalAuthority["KoreaSouth"] = "koreasouth";
    /** Uses the {@link RegionalAuthority} for the Azure 'koreacentral' region. */ RegionalAuthority["KoreaCentral"] = "koreacentral";
    /** Uses the {@link RegionalAuthority} for the Azure 'uaecentral' region. */ RegionalAuthority["UAECentral"] = "uaecentral";
    /** Uses the {@link RegionalAuthority} for the Azure 'uaenorth' region. */ RegionalAuthority["UAENorth"] = "uaenorth";
    /** Uses the {@link RegionalAuthority} for the Azure 'southafricanorth' region. */ RegionalAuthority["SouthAfricaNorth"] = "southafricanorth";
    /** Uses the {@link RegionalAuthority} for the Azure 'southafricawest' region. */ RegionalAuthority["SouthAfricaWest"] = "southafricawest";
    /** Uses the {@link RegionalAuthority} for the Azure 'chinanorth' region. */ RegionalAuthority["ChinaNorth"] = "chinanorth";
    /** Uses the {@link RegionalAuthority} for the Azure 'chinaeast' region. */ RegionalAuthority["ChinaEast"] = "chinaeast";
    /** Uses the {@link RegionalAuthority} for the Azure 'chinanorth2' region. */ RegionalAuthority["ChinaNorth2"] = "chinanorth2";
    /** Uses the {@link RegionalAuthority} for the Azure 'chinaeast2' region. */ RegionalAuthority["ChinaEast2"] = "chinaeast2";
    /** Uses the {@link RegionalAuthority} for the Azure 'germanycentral' region. */ RegionalAuthority["GermanyCentral"] = "germanycentral";
    /** Uses the {@link RegionalAuthority} for the Azure 'germanynortheast' region. */ RegionalAuthority["GermanyNorthEast"] = "germanynortheast";
    /** Uses the {@link RegionalAuthority} for the Azure 'usgovvirginia' region. */ RegionalAuthority["GovernmentUSVirginia"] = "usgovvirginia";
    /** Uses the {@link RegionalAuthority} for the Azure 'usgoviowa' region. */ RegionalAuthority["GovernmentUSIowa"] = "usgoviowa";
    /** Uses the {@link RegionalAuthority} for the Azure 'usgovarizona' region. */ RegionalAuthority["GovernmentUSArizona"] = "usgovarizona";
    /** Uses the {@link RegionalAuthority} for the Azure 'usgovtexas' region. */ RegionalAuthority["GovernmentUSTexas"] = "usgovtexas";
    /** Uses the {@link RegionalAuthority} for the Azure 'usdodeast' region. */ RegionalAuthority["GovernmentUSDodEast"] = "usdodeast";
    /** Uses the {@link RegionalAuthority} for the Azure 'usdodcentral' region. */ RegionalAuthority["GovernmentUSDodCentral"] = "usdodcentral";
})(RegionalAuthority || (RegionalAuthority = {}));
function calculateRegionalAuthority(regionalAuthority) {
    // Note: as of today only 3 credentials support regional authority, and the parameter
    // is not exposed via the public API. Regional Authority is _only_ supported
    // via the AZURE_REGIONAL_AUTHORITY_NAME env var and _only_ for: ClientSecretCredential, ClientCertificateCredential, and ClientAssertionCredential.
    var _a, _b;
    // Accepting the regionalAuthority parameter will allow us to support it in the future.
    let azureRegion = regionalAuthority;
    if (azureRegion === undefined && ((_b = (_a = globalThis.process) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.AZURE_REGIONAL_AUTHORITY_NAME) !== undefined) {
        azureRegion = process.env.AZURE_REGIONAL_AUTHORITY_NAME;
    }
    if (azureRegion === RegionalAuthority.AutoDiscoverRegion) {
        return "AUTO_DISCOVER";
    }
    return azureRegion;
} //# sourceMappingURL=regionalAuthority.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createMsalClient": (()=>createMsalClient),
    "generateMsalConfiguration": (()=>generateMsalConfiguration)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/msal-node/dist/index.mjs [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$client$2f$PublicClientApplication$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/msal-node/dist/client/PublicClientApplication.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$client$2f$ConfidentialClientApplication$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/msal-node/dist/client/ConfidentialClientApplication.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalPlugins$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalPlugins.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/utils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/client/identityClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$regionalAuthority$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/regionalAuthority.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/logger/dist/esm/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
;
;
;
;
;
;
;
;
;
/**
 * The default logger used if no logger was passed in by the credential.
 */ const msalLogger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("MsalClient");
function generateMsalConfiguration(clientId, tenantId, msalClientOptions = {}) {
    var _a, _b, _c;
    const resolvedTenant = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveTenantId"])((_a = msalClientOptions.logger) !== null && _a !== void 0 ? _a : msalLogger, tenantId, clientId);
    // TODO: move and reuse getIdentityClientAuthorityHost
    const authority = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getAuthority"])(resolvedTenant, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getAuthorityHost"])(msalClientOptions));
    const httpClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["IdentityClient"](Object.assign(Object.assign({}, msalClientOptions.tokenCredentialOptions), {
        authorityHost: authority,
        loggingOptions: msalClientOptions.loggingOptions
    }));
    const msalConfig = {
        auth: {
            clientId,
            authority,
            knownAuthorities: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getKnownAuthorities"])(resolvedTenant, authority, msalClientOptions.disableInstanceDiscovery)
        },
        system: {
            networkClient: httpClient,
            loggerOptions: {
                loggerCallback: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultLoggerCallback"])((_b = msalClientOptions.logger) !== null && _b !== void 0 ? _b : msalLogger),
                logLevel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getMSALLogLevel"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getLogLevel"])()),
                piiLoggingEnabled: (_c = msalClientOptions.loggingOptions) === null || _c === void 0 ? void 0 : _c.enableUnsafeSupportLogging
            }
        }
    };
    return msalConfig;
}
function createMsalClient(clientId, tenantId, createMsalClientOptions = {}) {
    var _a;
    const state = {
        msalConfig: generateMsalConfiguration(clientId, tenantId, createMsalClientOptions),
        cachedAccount: createMsalClientOptions.authenticationRecord ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["publicToMsal"])(createMsalClientOptions.authenticationRecord) : null,
        pluginConfiguration: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalPlugins$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["msalPlugins"].generatePluginConfiguration(createMsalClientOptions),
        logger: (_a = createMsalClientOptions.logger) !== null && _a !== void 0 ? _a : msalLogger
    };
    const publicApps = new Map();
    async function getPublicApp(options = {}) {
        const appKey = options.enableCae ? "CAE" : "default";
        let publicClientApp = publicApps.get(appKey);
        if (publicClientApp) {
            state.logger.getToken.info("Existing PublicClientApplication found in cache, returning it.");
            return publicClientApp;
        }
        // Initialize a new app and cache it
        state.logger.getToken.info(`Creating new PublicClientApplication with CAE ${options.enableCae ? "enabled" : "disabled"}.`);
        const cachePlugin = options.enableCae ? state.pluginConfiguration.cache.cachePluginCae : state.pluginConfiguration.cache.cachePlugin;
        state.msalConfig.auth.clientCapabilities = options.enableCae ? [
            "cp1"
        ] : undefined;
        publicClientApp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$client$2f$PublicClientApplication$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PublicClientApplication"](Object.assign(Object.assign({}, state.msalConfig), {
            broker: {
                nativeBrokerPlugin: state.pluginConfiguration.broker.nativeBrokerPlugin
            },
            cache: {
                cachePlugin: await cachePlugin
            }
        }));
        publicApps.set(appKey, publicClientApp);
        return publicClientApp;
    }
    const confidentialApps = new Map();
    async function getConfidentialApp(options = {}) {
        const appKey = options.enableCae ? "CAE" : "default";
        let confidentialClientApp = confidentialApps.get(appKey);
        if (confidentialClientApp) {
            state.logger.getToken.info("Existing ConfidentialClientApplication found in cache, returning it.");
            return confidentialClientApp;
        }
        // Initialize a new app and cache it
        state.logger.getToken.info(`Creating new ConfidentialClientApplication with CAE ${options.enableCae ? "enabled" : "disabled"}.`);
        const cachePlugin = options.enableCae ? state.pluginConfiguration.cache.cachePluginCae : state.pluginConfiguration.cache.cachePlugin;
        state.msalConfig.auth.clientCapabilities = options.enableCae ? [
            "cp1"
        ] : undefined;
        confidentialClientApp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$client$2f$ConfidentialClientApplication$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ConfidentialClientApplication"](Object.assign(Object.assign({}, state.msalConfig), {
            broker: {
                nativeBrokerPlugin: state.pluginConfiguration.broker.nativeBrokerPlugin
            },
            cache: {
                cachePlugin: await cachePlugin
            }
        }));
        confidentialApps.set(appKey, confidentialClientApp);
        return confidentialClientApp;
    }
    async function getTokenSilent(app, scopes, options = {}) {
        if (state.cachedAccount === null) {
            state.logger.getToken.info("No cached account found in local state.");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationRequiredError"]({
                scopes
            });
        }
        // Keep track and reuse the claims we received across challenges
        if (options.claims) {
            state.cachedClaims = options.claims;
        }
        const silentRequest = {
            account: state.cachedAccount,
            scopes,
            claims: state.cachedClaims
        };
        if (state.pluginConfiguration.broker.isEnabled) {
            silentRequest.tokenQueryParameters || (silentRequest.tokenQueryParameters = {});
            if (state.pluginConfiguration.broker.enableMsaPassthrough) {
                silentRequest.tokenQueryParameters["msal_request_type"] = "consumer_passthrough";
            }
        }
        if (options.proofOfPossessionOptions) {
            silentRequest.shrNonce = options.proofOfPossessionOptions.nonce;
            silentRequest.authenticationScheme = "pop";
            silentRequest.resourceRequestMethod = options.proofOfPossessionOptions.resourceRequestMethod;
            silentRequest.resourceRequestUri = options.proofOfPossessionOptions.resourceRequestUrl;
        }
        state.logger.getToken.info("Attempting to acquire token silently");
        try {
            return await app.acquireTokenSilent(silentRequest);
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handleMsalError"])(scopes, err, options);
        }
    }
    /**
     * Builds an authority URL for the given request. The authority may be different than the one used when creating the MSAL client
     * if the user is creating cross-tenant requests
     */ function calculateRequestAuthority(options) {
        if (options === null || options === void 0 ? void 0 : options.tenantId) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getAuthority"])(options.tenantId, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getAuthorityHost"])(createMsalClientOptions));
        }
        return state.msalConfig.auth.authority;
    }
    /**
     * Performs silent authentication using MSAL to acquire an access token.
     * If silent authentication fails, falls back to interactive authentication.
     *
     * @param msalApp - The MSAL application instance.
     * @param scopes - The scopes for which to acquire the access token.
     * @param options - The options for acquiring the access token.
     * @param onAuthenticationRequired - A callback function to handle interactive authentication when silent authentication fails.
     * @returns A promise that resolves to an AccessToken object containing the access token and its expiration timestamp.
     */ async function withSilentAuthentication(msalApp, scopes, options, onAuthenticationRequired) {
        var _a, _b;
        let response = null;
        try {
            response = await getTokenSilent(msalApp, scopes, options);
        } catch (e) {
            if (e.name !== "AuthenticationRequiredError") {
                throw e;
            }
            if (options.disableAutomaticAuthentication) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationRequiredError"]({
                    scopes,
                    getTokenOptions: options,
                    message: "Automatic authentication has been disabled. You may call the authentication() method."
                });
            }
        }
        // Silent authentication failed
        if (response === null) {
            try {
                response = await onAuthenticationRequired();
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handleMsalError"])(scopes, err, options);
            }
        }
        // At this point we should have a token, process it
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureValidMsalToken"])(scopes, response, options);
        state.cachedAccount = (_a = response === null || response === void 0 ? void 0 : response.account) !== null && _a !== void 0 ? _a : null;
        state.logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
        return {
            token: response.accessToken,
            expiresOnTimestamp: response.expiresOn.getTime(),
            refreshAfterTimestamp: (_b = response.refreshOn) === null || _b === void 0 ? void 0 : _b.getTime(),
            tokenType: response.tokenType
        };
    }
    async function getTokenByClientSecret(scopes, clientSecret, options = {}) {
        var _a;
        state.logger.getToken.info(`Attempting to acquire token using client secret`);
        state.msalConfig.auth.clientSecret = clientSecret;
        const msalApp = await getConfidentialApp(options);
        try {
            const response = await msalApp.acquireTokenByClientCredential({
                scopes,
                authority: calculateRequestAuthority(options),
                azureRegion: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$regionalAuthority$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["calculateRegionalAuthority"])(),
                claims: options === null || options === void 0 ? void 0 : options.claims
            });
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureValidMsalToken"])(scopes, response, options);
            state.logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
            return {
                token: response.accessToken,
                expiresOnTimestamp: response.expiresOn.getTime(),
                refreshAfterTimestamp: (_a = response.refreshOn) === null || _a === void 0 ? void 0 : _a.getTime(),
                tokenType: response.tokenType
            };
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handleMsalError"])(scopes, err, options);
        }
    }
    async function getTokenByClientAssertion(scopes, clientAssertion, options = {}) {
        var _a;
        state.logger.getToken.info(`Attempting to acquire token using client assertion`);
        state.msalConfig.auth.clientAssertion = clientAssertion;
        const msalApp = await getConfidentialApp(options);
        try {
            const response = await msalApp.acquireTokenByClientCredential({
                scopes,
                authority: calculateRequestAuthority(options),
                azureRegion: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$regionalAuthority$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["calculateRegionalAuthority"])(),
                claims: options === null || options === void 0 ? void 0 : options.claims,
                clientAssertion
            });
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureValidMsalToken"])(scopes, response, options);
            state.logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
            return {
                token: response.accessToken,
                expiresOnTimestamp: response.expiresOn.getTime(),
                refreshAfterTimestamp: (_a = response.refreshOn) === null || _a === void 0 ? void 0 : _a.getTime(),
                tokenType: response.tokenType
            };
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handleMsalError"])(scopes, err, options);
        }
    }
    async function getTokenByClientCertificate(scopes, certificate, options = {}) {
        var _a;
        state.logger.getToken.info(`Attempting to acquire token using client certificate`);
        state.msalConfig.auth.clientCertificate = certificate;
        const msalApp = await getConfidentialApp(options);
        try {
            const response = await msalApp.acquireTokenByClientCredential({
                scopes,
                authority: calculateRequestAuthority(options),
                azureRegion: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$regionalAuthority$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["calculateRegionalAuthority"])(),
                claims: options === null || options === void 0 ? void 0 : options.claims
            });
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureValidMsalToken"])(scopes, response, options);
            state.logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
            return {
                token: response.accessToken,
                expiresOnTimestamp: response.expiresOn.getTime(),
                refreshAfterTimestamp: (_a = response.refreshOn) === null || _a === void 0 ? void 0 : _a.getTime(),
                tokenType: response.tokenType
            };
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handleMsalError"])(scopes, err, options);
        }
    }
    async function getTokenByDeviceCode(scopes, deviceCodeCallback, options = {}) {
        state.logger.getToken.info(`Attempting to acquire token using device code`);
        const msalApp = await getPublicApp(options);
        return withSilentAuthentication(msalApp, scopes, options, ()=>{
            var _a, _b;
            const requestOptions = {
                scopes,
                cancel: (_b = (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) !== null && _b !== void 0 ? _b : false,
                deviceCodeCallback,
                authority: calculateRequestAuthority(options),
                claims: options === null || options === void 0 ? void 0 : options.claims
            };
            const deviceCodeRequest = msalApp.acquireTokenByDeviceCode(requestOptions);
            if (options.abortSignal) {
                options.abortSignal.addEventListener("abort", ()=>{
                    requestOptions.cancel = true;
                });
            }
            return deviceCodeRequest;
        });
    }
    async function getTokenByUsernamePassword(scopes, username, password, options = {}) {
        state.logger.getToken.info(`Attempting to acquire token using username and password`);
        const msalApp = await getPublicApp(options);
        return withSilentAuthentication(msalApp, scopes, options, ()=>{
            const requestOptions = {
                scopes,
                username,
                password,
                authority: calculateRequestAuthority(options),
                claims: options === null || options === void 0 ? void 0 : options.claims
            };
            return msalApp.acquireTokenByUsernamePassword(requestOptions);
        });
    }
    function getActiveAccount() {
        if (!state.cachedAccount) {
            return undefined;
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["msalToPublic"])(clientId, state.cachedAccount);
    }
    async function getTokenByAuthorizationCode(scopes, redirectUri, authorizationCode, clientSecret, options = {}) {
        state.logger.getToken.info(`Attempting to acquire token using authorization code`);
        let msalApp;
        if (clientSecret) {
            // If a client secret is provided, we need to use a confidential client application
            // See https://learn.microsoft.com/entra/identity-platform/v2-oauth2-auth-code-flow#request-an-access-token-with-a-client_secret
            state.msalConfig.auth.clientSecret = clientSecret;
            msalApp = await getConfidentialApp(options);
        } else {
            msalApp = await getPublicApp(options);
        }
        return withSilentAuthentication(msalApp, scopes, options, ()=>{
            return msalApp.acquireTokenByCode({
                scopes,
                redirectUri,
                code: authorizationCode,
                authority: calculateRequestAuthority(options),
                claims: options === null || options === void 0 ? void 0 : options.claims
            });
        });
    }
    async function getTokenOnBehalfOf(scopes, userAssertionToken, clientCredentials, options = {}) {
        var _a;
        msalLogger.getToken.info(`Attempting to acquire token on behalf of another user`);
        if (typeof clientCredentials === "string") {
            // Client secret
            msalLogger.getToken.info(`Using client secret for on behalf of flow`);
            state.msalConfig.auth.clientSecret = clientCredentials;
        } else if (typeof clientCredentials === "function") {
            // Client Assertion
            msalLogger.getToken.info(`Using client assertion callback for on behalf of flow`);
            state.msalConfig.auth.clientAssertion = clientCredentials;
        } else {
            // Client certificate
            msalLogger.getToken.info(`Using client certificate for on behalf of flow`);
            state.msalConfig.auth.clientCertificate = clientCredentials;
        }
        const msalApp = await getConfidentialApp(options);
        try {
            const response = await msalApp.acquireTokenOnBehalfOf({
                scopes,
                authority: calculateRequestAuthority(options),
                claims: options.claims,
                oboAssertion: userAssertionToken
            });
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureValidMsalToken"])(scopes, response, options);
            msalLogger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
            return {
                token: response.accessToken,
                expiresOnTimestamp: response.expiresOn.getTime(),
                refreshAfterTimestamp: (_a = response.refreshOn) === null || _a === void 0 ? void 0 : _a.getTime(),
                tokenType: response.tokenType
            };
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handleMsalError"])(scopes, err, options);
        }
    }
    async function getTokenByInteractiveRequest(scopes, options = {}) {
        msalLogger.getToken.info(`Attempting to acquire token interactively`);
        const app = await getPublicApp(options);
        /**
         * A helper function that supports brokered authentication through the MSAL's public application.
         *
         * When options.useDefaultBrokerAccount is true, the method will attempt to authenticate using the default broker account.
         * If the default broker account is not available, the method will fall back to interactive authentication.
         */ async function getBrokeredToken(useDefaultBrokerAccount) {
            var _a;
            msalLogger.verbose("Authentication will resume through the broker");
            const interactiveRequest = createBaseInteractiveRequest();
            if (state.pluginConfiguration.broker.parentWindowHandle) {
                interactiveRequest.windowHandle = Buffer.from(state.pluginConfiguration.broker.parentWindowHandle);
            } else {
                // this is a bug, as the pluginConfiguration handler should validate this case.
                msalLogger.warning("Parent window handle is not specified for the broker. This may cause unexpected behavior. Please provide the parentWindowHandle.");
            }
            if (state.pluginConfiguration.broker.enableMsaPassthrough) {
                ((_a = interactiveRequest.tokenQueryParameters) !== null && _a !== void 0 ? _a : interactiveRequest.tokenQueryParameters = {})["msal_request_type"] = "consumer_passthrough";
            }
            if (useDefaultBrokerAccount) {
                interactiveRequest.prompt = "none";
                msalLogger.verbose("Attempting broker authentication using the default broker account");
            } else {
                msalLogger.verbose("Attempting broker authentication without the default broker account");
            }
            if (options.proofOfPossessionOptions) {
                interactiveRequest.shrNonce = options.proofOfPossessionOptions.nonce;
                interactiveRequest.authenticationScheme = "pop";
                interactiveRequest.resourceRequestMethod = options.proofOfPossessionOptions.resourceRequestMethod;
                interactiveRequest.resourceRequestUri = options.proofOfPossessionOptions.resourceRequestUrl;
            }
            try {
                return await app.acquireTokenInteractive(interactiveRequest);
            } catch (e) {
                msalLogger.verbose(`Failed to authenticate through the broker: ${e.message}`);
                // If we tried to use the default broker account and failed, fall back to interactive authentication
                if (useDefaultBrokerAccount) {
                    return getBrokeredToken(/* useDefaultBrokerAccount: */ false);
                } else {
                    throw e;
                }
            }
        }
        function createBaseInteractiveRequest() {
            var _a, _b;
            return {
                openBrowser: async (url)=>{
                    const open = await __turbopack_context__.r("[project]/node_modules/@azure/identity/node_modules/open/index.js [app-rsc] (ecmascript, async loader)")(__turbopack_context__.i);
                    await open.default(url, {
                        wait: true,
                        newInstance: true
                    });
                },
                scopes,
                authority: calculateRequestAuthority(options),
                claims: options === null || options === void 0 ? void 0 : options.claims,
                loginHint: options === null || options === void 0 ? void 0 : options.loginHint,
                errorTemplate: (_a = options === null || options === void 0 ? void 0 : options.browserCustomizationOptions) === null || _a === void 0 ? void 0 : _a.errorMessage,
                successTemplate: (_b = options === null || options === void 0 ? void 0 : options.browserCustomizationOptions) === null || _b === void 0 ? void 0 : _b.successMessage,
                prompt: (options === null || options === void 0 ? void 0 : options.loginHint) ? "login" : "select_account"
            };
        }
        return withSilentAuthentication(app, scopes, options, async ()=>{
            var _a;
            const interactiveRequest = createBaseInteractiveRequest();
            if (state.pluginConfiguration.broker.isEnabled) {
                return getBrokeredToken((_a = state.pluginConfiguration.broker.useDefaultBrokerAccount) !== null && _a !== void 0 ? _a : false);
            }
            if (options.proofOfPossessionOptions) {
                interactiveRequest.shrNonce = options.proofOfPossessionOptions.nonce;
                interactiveRequest.authenticationScheme = "pop";
                interactiveRequest.resourceRequestMethod = options.proofOfPossessionOptions.resourceRequestMethod;
                interactiveRequest.resourceRequestUri = options.proofOfPossessionOptions.resourceRequestUrl;
            }
            return app.acquireTokenInteractive(interactiveRequest);
        });
    }
    return {
        getActiveAccount,
        getTokenByClientSecret,
        getTokenByClientAssertion,
        getTokenByClientCertificate,
        getTokenByDeviceCode,
        getTokenByUsernamePassword,
        getTokenByAuthorizationCode,
        getTokenOnBehalfOf,
        getTokenByInteractiveRequest
    };
} //# sourceMappingURL=msalClient.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/clientAssertionCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "ClientAssertionCredential": (()=>ClientAssertionCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("ClientAssertionCredential");
class ClientAssertionCredential {
    /**
     * Creates an instance of the ClientAssertionCredential with the details
     * needed to authenticate against Microsoft Entra ID with a client
     * assertion provided by the developer through the `getAssertion` function parameter.
     *
     * @param tenantId - The Microsoft Entra tenant (directory) ID.
     * @param clientId - The client (application) ID of an App Registration in the tenant.
     * @param getAssertion - A function that retrieves the assertion for the credential to use.
     * @param options - Options for configuring the client which makes the authentication request.
     */ constructor(tenantId, clientId, getAssertion, options = {}){
        if (!tenantId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("ClientAssertionCredential: tenantId is a required parameter.");
        }
        if (!clientId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("ClientAssertionCredential: clientId is a required parameter.");
        }
        if (!getAssertion) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("ClientAssertionCredential: clientAssertion is a required parameter.");
        }
        this.tenantId = tenantId;
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        this.options = options;
        this.getAssertion = getAssertion;
        this.msalClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMsalClient"])(clientId, tenantId, Object.assign(Object.assign({}, options), {
            logger,
            tokenCredentialOptions: this.options
        }));
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{
            newOptions.tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);
            const arrayScopes = Array.isArray(scopes) ? scopes : [
                scopes
            ];
            return this.msalClient.getTokenByClientAssertion(arrayScopes, this.getAssertion, newOptions);
        });
    }
} //# sourceMappingURL=clientAssertionCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/workloadIdentityCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "SupportedWorkloadEnvironmentVariables": (()=>SupportedWorkloadEnvironmentVariables),
    "WorkloadIdentityCredential": (()=>WorkloadIdentityCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientAssertionCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientAssertionCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs/promises [external] (node:fs/promises, cjs)");
;
;
;
;
;
const credentialName = "WorkloadIdentityCredential";
const SupportedWorkloadEnvironmentVariables = [
    "AZURE_TENANT_ID",
    "AZURE_CLIENT_ID",
    "AZURE_FEDERATED_TOKEN_FILE"
];
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])(credentialName);
class WorkloadIdentityCredential {
    /**
     * WorkloadIdentityCredential supports Microsoft Entra Workload ID on Kubernetes.
     *
     * @param options - The identity client options to use for authentication.
     */ constructor(options){
        this.azureFederatedTokenFileContent = undefined;
        this.cacheDate = undefined;
        // Logging environment variables for error details
        const assignedEnv = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processEnvVars"])(SupportedWorkloadEnvironmentVariables).assigned.join(", ");
        logger.info(`Found the following environment variables: ${assignedEnv}`);
        const workloadIdentityCredentialOptions = options !== null && options !== void 0 ? options : {};
        const tenantId = workloadIdentityCredentialOptions.tenantId || process.env.AZURE_TENANT_ID;
        const clientId = workloadIdentityCredentialOptions.clientId || process.env.AZURE_CLIENT_ID;
        this.federatedTokenFilePath = workloadIdentityCredentialOptions.tokenFilePath || process.env.AZURE_FEDERATED_TOKEN_FILE;
        if (tenantId) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, tenantId);
        }
        if (!clientId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. clientId is a required parameter. In DefaultAzureCredential and ManagedIdentityCredential, this can be provided as an environment variable - "AZURE_CLIENT_ID".
        See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot`);
        }
        if (!tenantId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. tenantId is a required parameter. In DefaultAzureCredential and ManagedIdentityCredential, this can be provided as an environment variable - "AZURE_TENANT_ID".
        See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot`);
        }
        if (!this.federatedTokenFilePath) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. federatedTokenFilePath is a required parameter. In DefaultAzureCredential and ManagedIdentityCredential, this can be provided as an environment variable - "AZURE_FEDERATED_TOKEN_FILE".
        See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot`);
        }
        logger.info(`Invoking ClientAssertionCredential with tenant ID: ${tenantId}, clientId: ${workloadIdentityCredentialOptions.clientId} and federated token path: [REDACTED]`);
        this.client = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientAssertionCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ClientAssertionCredential"](tenantId, clientId, this.readFileContents.bind(this), options);
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options) {
        if (!this.client) {
            const errorMessage = `${credentialName}: is unavailable. tenantId, clientId, and federatedTokenFilePath are required parameters. 
      In DefaultAzureCredential and ManagedIdentityCredential, these can be provided as environment variables - 
      "AZURE_TENANT_ID",
      "AZURE_CLIENT_ID",
      "AZURE_FEDERATED_TOKEN_FILE". See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot`;
            logger.info(errorMessage);
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](errorMessage);
        }
        logger.info("Invoking getToken() of Client Assertion Credential");
        return this.client.getToken(scopes, options);
    }
    async readFileContents() {
        // Cached assertions expire after 5 minutes
        if (this.cacheDate !== undefined && Date.now() - this.cacheDate >= 1000 * 60 * 5) {
            this.azureFederatedTokenFileContent = undefined;
        }
        if (!this.federatedTokenFilePath) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. Invalid file path provided ${this.federatedTokenFilePath}.`);
        }
        if (!this.azureFederatedTokenFileContent) {
            const file = await (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__["readFile"])(this.federatedTokenFilePath, "utf8");
            const value = file.trim();
            if (!value) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. No content on the file ${this.federatedTokenFilePath}.`);
            } else {
                this.azureFederatedTokenFileContent = value;
                this.cacheDate = Date.now();
            }
        }
        return this.azureFederatedTokenFileContent;
    }
} //# sourceMappingURL=workloadIdentityCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/tokenExchangeMsi.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "tokenExchangeMsi": (()=>tokenExchangeMsi)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$workloadIdentityCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/workloadIdentityCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
;
;
const msiName = "ManagedIdentityCredential - Token Exchange";
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])(msiName);
const tokenExchangeMsi = {
    name: "tokenExchangeMsi",
    async isAvailable (clientId) {
        const env = process.env;
        const result = Boolean((clientId || env.AZURE_CLIENT_ID) && env.AZURE_TENANT_ID && process.env.AZURE_FEDERATED_TOKEN_FILE);
        if (!result) {
            logger.info(`${msiName}: Unavailable. The environment variables needed are: AZURE_CLIENT_ID (or the client ID sent through the parameters), AZURE_TENANT_ID and AZURE_FEDERATED_TOKEN_FILE`);
        }
        return result;
    },
    async getToken (configuration, getTokenOptions = {}) {
        const { scopes, clientId } = configuration;
        const identityClientTokenCredentialOptions = {};
        const workloadIdentityCredential = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$workloadIdentityCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WorkloadIdentityCredential"](Object.assign(Object.assign({
            clientId,
            tenantId: process.env.AZURE_TENANT_ID,
            tokenFilePath: process.env.AZURE_FEDERATED_TOKEN_FILE
        }, identityClientTokenCredentialOptions), {
            disableInstanceDiscovery: true
        }));
        return workloadIdentityCredential.getToken(scopes, getTokenOptions);
    }
}; //# sourceMappingURL=tokenExchangeMsi.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "ManagedIdentityCredential": (()=>ManagedIdentityCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/logger/dist/esm/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/msal-node/dist/index.mjs [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$client$2f$ManagedIdentityApplication$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/msal-node/dist/client/ManagedIdentityApplication.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/client/identityClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/utils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$imdsRetryPolicy$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/imdsRetryPolicy.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$imdsMsi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/imdsMsi.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$tokenExchangeMsi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/tokenExchangeMsi.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/utils.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("ManagedIdentityCredential");
class ManagedIdentityCredential {
    /**
     * @internal
     * @hidden
     */ constructor(clientIdOrOptions, options){
        var _a, _b;
        this.msiRetryConfig = {
            maxRetries: 5,
            startDelayInMs: 800,
            intervalIncrement: 2
        };
        let _options;
        if (typeof clientIdOrOptions === "string") {
            this.clientId = clientIdOrOptions;
            _options = options !== null && options !== void 0 ? options : {};
        } else {
            this.clientId = clientIdOrOptions === null || clientIdOrOptions === void 0 ? void 0 : clientIdOrOptions.clientId;
            _options = clientIdOrOptions !== null && clientIdOrOptions !== void 0 ? clientIdOrOptions : {};
        }
        this.resourceId = _options === null || _options === void 0 ? void 0 : _options.resourceId;
        this.objectId = _options === null || _options === void 0 ? void 0 : _options.objectId;
        // For JavaScript users.
        const providedIds = [
            {
                key: "clientId",
                value: this.clientId
            },
            {
                key: "resourceId",
                value: this.resourceId
            },
            {
                key: "objectId",
                value: this.objectId
            }
        ].filter((id)=>id.value);
        if (providedIds.length > 1) {
            throw new Error(`ManagedIdentityCredential: only one of 'clientId', 'resourceId', or 'objectId' can be provided. Received values: ${JSON.stringify({
                clientId: this.clientId,
                resourceId: this.resourceId,
                objectId: this.objectId
            })}`);
        }
        // ManagedIdentity uses http for local requests
        _options.allowInsecureConnection = true;
        if (((_a = _options.retryOptions) === null || _a === void 0 ? void 0 : _a.maxRetries) !== undefined) {
            this.msiRetryConfig.maxRetries = _options.retryOptions.maxRetries;
        }
        this.identityClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["IdentityClient"](Object.assign(Object.assign({}, _options), {
            additionalPolicies: [
                {
                    policy: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$imdsRetryPolicy$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["imdsRetryPolicy"])(this.msiRetryConfig),
                    position: "perCall"
                }
            ]
        }));
        this.managedIdentityApp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$msal$2d$node$2f$dist$2f$client$2f$ManagedIdentityApplication$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ManagedIdentityApplication"]({
            managedIdentityIdParams: {
                userAssignedClientId: this.clientId,
                userAssignedResourceId: this.resourceId,
                userAssignedObjectId: this.objectId
            },
            system: {
                disableInternalRetries: true,
                networkClient: this.identityClient,
                loggerOptions: {
                    logLevel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getMSALLogLevel"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getLogLevel"])()),
                    piiLoggingEnabled: (_b = _options.loggingOptions) === null || _b === void 0 ? void 0 : _b.enableUnsafeSupportLogging,
                    loggerCallback: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultLoggerCallback"])(logger)
                }
            }
        });
        this.isAvailableIdentityClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["IdentityClient"](Object.assign(Object.assign({}, _options), {
            retryOptions: {
                maxRetries: 0
            }
        }));
        const managedIdentitySource = this.managedIdentityApp.getManagedIdentitySource();
        // CloudShell MSI will ignore any user-assigned identity passed as parameters. To avoid confusion, we prevent this from happening as early as possible.
        if (managedIdentitySource === "CloudShell") {
            if (this.clientId || this.resourceId || this.objectId) {
                logger.warning(`CloudShell MSI detected with user-provided IDs - throwing. Received values: ${JSON.stringify({
                    clientId: this.clientId,
                    resourceId: this.resourceId,
                    objectId: this.objectId
                })}.`);
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("ManagedIdentityCredential: Specifying a user-assigned managed identity is not supported for CloudShell at runtime. When using Managed Identity in CloudShell, omit the clientId, resourceId, and objectId parameters.");
            }
        }
        // ServiceFabric does not support specifying user-assigned managed identity by client ID or resource ID. The managed identity selected is based on the resource configuration.
        if (managedIdentitySource === "ServiceFabric") {
            if (this.clientId || this.resourceId || this.objectId) {
                logger.warning(`Service Fabric detected with user-provided IDs - throwing. Received values: ${JSON.stringify({
                    clientId: this.clientId,
                    resourceId: this.resourceId,
                    objectId: this.objectId
                })}.`);
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`ManagedIdentityCredential: ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["serviceFabricErrorMessage"]}`);
            }
        }
        logger.info(`Using ${managedIdentitySource} managed identity.`);
        // Check if either clientId, resourceId or objectId was provided and log the value used
        if (providedIds.length === 1) {
            const { key, value } = providedIds[0];
            logger.info(`${managedIdentitySource} with ${key}: ${value}`);
        }
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     * If an unexpected error occurs, an {@link AuthenticationError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        logger.getToken.info("Using the MSAL provider for Managed Identity.");
        const resource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mapScopesToResource"])(scopes);
        if (!resource) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`ManagedIdentityCredential: Multiple scopes are not supported. Scopes: ${JSON.stringify(scopes)}`);
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan("ManagedIdentityCredential.getToken", options, async ()=>{
            var _a;
            try {
                const isTokenExchangeMsi = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$tokenExchangeMsi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tokenExchangeMsi"].isAvailable(this.clientId);
                // Most scenarios are handled by MSAL except for two:
                // AKS pod identity - MSAL does not implement the token exchange flow.
                // IMDS Endpoint probing - MSAL does not do any probing before trying to get a token.
                // As a DefaultAzureCredential optimization we probe the IMDS endpoint with a short timeout and no retries before actually trying to get a token
                // We will continue to implement these features in the Identity library.
                const identitySource = this.managedIdentityApp.getManagedIdentitySource();
                const isImdsMsi = identitySource === "DefaultToImds" || identitySource === "Imds"; // Neither actually checks that IMDS endpoint is available, just that it's the source the MSAL _would_ try to use.
                logger.getToken.info(`MSAL Identity source: ${identitySource}`);
                if (isTokenExchangeMsi) {
                    // In the AKS scenario we will use the existing tokenExchangeMsi indefinitely.
                    logger.getToken.info("Using the token exchange managed identity.");
                    const result = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$tokenExchangeMsi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tokenExchangeMsi"].getToken({
                        scopes,
                        clientId: this.clientId,
                        identityClient: this.identityClient,
                        retryConfig: this.msiRetryConfig,
                        resourceId: this.resourceId
                    });
                    if (result === null) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("Attempted to use the token exchange managed identity, but received a null response.");
                    }
                    return result;
                } else if (isImdsMsi) {
                    // In the IMDS scenario we will probe the IMDS endpoint to ensure it's available before trying to get a token.
                    // If the IMDS endpoint is not available and this is the source that MSAL will use, we will fail-fast with an error that tells DAC to move to the next credential.
                    logger.getToken.info("Using the IMDS endpoint to probe for availability.");
                    const isAvailable = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$imdsMsi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["imdsMsi"].isAvailable({
                        scopes,
                        clientId: this.clientId,
                        getTokenOptions: options,
                        identityClient: this.isAvailableIdentityClient,
                        resourceId: this.resourceId
                    });
                    if (!isAvailable) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`Attempted to use the IMDS endpoint, but it is not available.`);
                    }
                }
                // If we got this far, it means:
                // - This is not a tokenExchangeMsi,
                // - We already probed for IMDS endpoint availability and failed-fast if it's unreachable.
                // We can proceed normally by calling MSAL for a token.
                logger.getToken.info("Calling into MSAL for managed identity token.");
                const token = await this.managedIdentityApp.acquireToken({
                    resource
                });
                this.ensureValidMsalToken(scopes, token, options);
                logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
                return {
                    expiresOnTimestamp: token.expiresOn.getTime(),
                    token: token.accessToken,
                    refreshAfterTimestamp: (_a = token.refreshOn) === null || _a === void 0 ? void 0 : _a.getTime(),
                    tokenType: "Bearer"
                };
            } catch (err) {
                logger.getToken.error((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, err));
                // AuthenticationRequiredError described as Error to enforce authentication after trying to retrieve a token silently.
                // TODO: why would this _ever_ happen considering we're not trying the silent request in this flow?
                if (err.name === "AuthenticationRequiredError") {
                    throw err;
                }
                if (isNetworkError(err)) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`ManagedIdentityCredential: Network unreachable. Message: ${err.message}`, {
                        cause: err
                    });
                }
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`ManagedIdentityCredential: Authentication failed. Message ${err.message}`, {
                    cause: err
                });
            }
        });
    }
    /**
     * Ensures the validity of the MSAL token
     */ ensureValidMsalToken(scopes, msalToken, getTokenOptions) {
        const createError = (message)=>{
            logger.getToken.info(message);
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationRequiredError"]({
                scopes: Array.isArray(scopes) ? scopes : [
                    scopes
                ],
                getTokenOptions,
                message
            });
        };
        if (!msalToken) {
            throw createError("No response.");
        }
        if (!msalToken.expiresOn) {
            throw createError(`Response had no "expiresOn" property.`);
        }
        if (!msalToken.accessToken) {
            throw createError(`Response had no "accessToken" property.`);
        }
    }
}
function isNetworkError(err) {
    // MSAL error
    if (err.errorCode === "network_error") {
        return true;
    }
    // Probe errors
    if (err.code === "ENETUNREACH" || err.code === "EHOSTUNREACH") {
        return true;
    }
    // This is a special case for Docker Desktop which responds with a 403 with a message that contains "A socket operation was attempted to an unreachable network" or "A socket operation was attempted to an unreachable host"
    // rather than just timing out, as expected.
    if (err.statusCode === 403 || err.code === 403) {
        if (err.message.includes("unreachable")) {
            return true;
        }
    }
    return false;
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "ensureScopes": (()=>ensureScopes),
    "ensureValidScopeForDevTimeCreds": (()=>ensureValidScopeForDevTimeCreds),
    "getScopeResource": (()=>getScopeResource)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
;
function ensureScopes(scopes) {
    return Array.isArray(scopes) ? scopes : [
        scopes
    ];
}
function ensureValidScopeForDevTimeCreds(scope, logger) {
    if (!scope.match(/^[0-9a-zA-Z-_.:/]+$/)) {
        const error = new Error("Invalid scope was specified by the user or calling client");
        logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scope, error));
        throw error;
    }
}
function getScopeResource(scope) {
    return scope.replace(/\/.default$/, "");
} //# sourceMappingURL=scopeUtils.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/subscriptionUtils.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "checkSubscription": (()=>checkSubscription)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
;
function checkSubscription(logger, subscription) {
    if (!subscription.match(/^[0-9a-zA-Z-._ ]+$/)) {
        const error = new Error("Invalid subscription provided. You can locate your subscription by following the instructions listed here: https://learn.microsoft.com/azure/azure-portal/get-subscription-tenant-id.");
        logger.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])("", error));
        throw error;
    }
} //# sourceMappingURL=subscriptionUtils.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/azureCliCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AzureCliCredential": (()=>AzureCliCredential),
    "cliCredentialInternals": (()=>cliCredentialInternals)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$child_process__$5b$external$5d$__$28$child_process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/child_process [external] (child_process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$subscriptionUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/subscriptionUtils.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("AzureCliCredential");
const cliCredentialInternals = {
    /**
     * @internal
     */ getSafeWorkingDir () {
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        } else {
            return "/bin";
        }
    },
    /**
     * Gets the access token from Azure CLI
     * @param resource - The resource to use when getting the token
     * @internal
     */ async getAzureCliAccessToken (resource, tenantId, subscription, timeout) {
        let tenantSection = [];
        let subscriptionSection = [];
        if (tenantId) {
            tenantSection = [
                "--tenant",
                tenantId
            ];
        }
        if (subscription) {
            // Add quotes around the subscription to handle subscriptions with spaces
            subscriptionSection = [
                "--subscription",
                `"${subscription}"`
            ];
        }
        return new Promise((resolve, reject)=>{
            try {
                __TURBOPACK__imported__module__$5b$externals$5d2f$child_process__$5b$external$5d$__$28$child_process$2c$__cjs$29$__["default"].execFile("az", [
                    "account",
                    "get-access-token",
                    "--output",
                    "json",
                    "--resource",
                    resource,
                    ...tenantSection,
                    ...subscriptionSection
                ], {
                    cwd: cliCredentialInternals.getSafeWorkingDir(),
                    shell: true,
                    timeout
                }, (error, stdout, stderr)=>{
                    resolve({
                        stdout: stdout,
                        stderr: stderr,
                        error
                    });
                });
            } catch (err) {
                reject(err);
            }
        });
    }
};
class AzureCliCredential {
    /**
     * Creates an instance of the {@link AzureCliCredential}.
     *
     * To use this credential, ensure that you have already logged
     * in via the 'az' tool using the command "az login" from the commandline.
     *
     * @param options - Options, to optionally allow multi-tenant requests.
     */ constructor(options){
        if (options === null || options === void 0 ? void 0 : options.tenantId) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, options === null || options === void 0 ? void 0 : options.tenantId);
            this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;
        }
        if (options === null || options === void 0 ? void 0 : options.subscription) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$subscriptionUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkSubscription"])(logger, options === null || options === void 0 ? void 0 : options.subscription);
            this.subscription = options === null || options === void 0 ? void 0 : options.subscription;
        }
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        this.timeout = options === null || options === void 0 ? void 0 : options.processTimeoutInMs;
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        const tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, options, this.additionallyAllowedTenantIds);
        if (tenantId) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, tenantId);
        }
        if (this.subscription) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$subscriptionUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkSubscription"])(logger, this.subscription);
        }
        const scope = typeof scopes === "string" ? scopes : scopes[0];
        logger.getToken.info(`Using the scope ${scope}`);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async ()=>{
            var _a, _b, _c, _d;
            try {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureValidScopeForDevTimeCreds"])(scope, logger);
                const resource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getScopeResource"])(scope);
                const obj = await cliCredentialInternals.getAzureCliAccessToken(resource, tenantId, this.subscription, this.timeout);
                const specificScope = (_a = obj.stderr) === null || _a === void 0 ? void 0 : _a.match("(.*)az login --scope(.*)");
                const isLoginError = ((_b = obj.stderr) === null || _b === void 0 ? void 0 : _b.match("(.*)az login(.*)")) && !specificScope;
                const isNotInstallError = ((_c = obj.stderr) === null || _c === void 0 ? void 0 : _c.match("az:(.*)not found")) || ((_d = obj.stderr) === null || _d === void 0 ? void 0 : _d.startsWith("'az' is not recognized"));
                if (isNotInstallError) {
                    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("Azure CLI could not be found. Please visit https://aka.ms/azure-cli for installation instructions and then, once installed, authenticate to your Azure account using 'az login'.");
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
                    throw error;
                }
                if (isLoginError) {
                    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("Please run 'az login' from a command prompt to authenticate before using this credential.");
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
                    throw error;
                }
                try {
                    const responseData = obj.stdout;
                    const response = this.parseRawResponse(responseData);
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
                    return response;
                } catch (e) {
                    if (obj.stderr) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](obj.stderr);
                    }
                    throw e;
                }
            } catch (err) {
                const error = err.name === "CredentialUnavailableError" ? err : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](err.message || "Unknown error while trying to retrieve the access token");
                logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
                throw error;
            }
        });
    }
    /**
     * Parses the raw JSON response from the Azure CLI into a usable AccessToken object
     *
     * @param rawResponse - The raw JSON response from the Azure CLI
     * @returns An access token with the expiry time parsed from the raw response
     *
     * The expiryTime of the credential's access token, in milliseconds, is calculated as follows:
     *
     * When available, expires_on (introduced in Azure CLI v2.54.0) will be preferred. Otherwise falls back to expiresOn.
     */ parseRawResponse(rawResponse) {
        const response = JSON.parse(rawResponse);
        const token = response.accessToken;
        // if available, expires_on will be a number representing seconds since epoch.
        // ensure it's a number or NaN
        let expiresOnTimestamp = Number.parseInt(response.expires_on, 10) * 1000;
        if (!isNaN(expiresOnTimestamp)) {
            logger.getToken.info("expires_on is available and is valid, using it");
            return {
                token,
                expiresOnTimestamp,
                tokenType: "Bearer"
            };
        }
        // fallback to the older expiresOn - an RFC3339 date string
        expiresOnTimestamp = new Date(response.expiresOn).getTime();
        // ensure expiresOn is well-formatted
        if (isNaN(expiresOnTimestamp)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`Unexpected response from Azure CLI when getting token. Expected "expiresOn" to be a RFC3339 date string. Got: "${response.expiresOn}"`);
        }
        return {
            token,
            expiresOnTimestamp,
            tokenType: "Bearer"
        };
    }
} //# sourceMappingURL=azureCliCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/azureDeveloperCliCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AzureDeveloperCliCredential": (()=>AzureDeveloperCliCredential),
    "developerCliCredentialInternals": (()=>developerCliCredentialInternals)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$child_process__$5b$external$5d$__$28$child_process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/child_process [external] (child_process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("AzureDeveloperCliCredential");
const developerCliCredentialInternals = {
    /**
     * @internal
     */ getSafeWorkingDir () {
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        } else {
            return "/bin";
        }
    },
    /**
     * Gets the access token from Azure Developer CLI
     * @param scopes - The scopes to use when getting the token
     * @internal
     */ async getAzdAccessToken (scopes, tenantId, timeout) {
        let tenantSection = [];
        if (tenantId) {
            tenantSection = [
                "--tenant-id",
                tenantId
            ];
        }
        return new Promise((resolve, reject)=>{
            try {
                __TURBOPACK__imported__module__$5b$externals$5d2f$child_process__$5b$external$5d$__$28$child_process$2c$__cjs$29$__["default"].execFile("azd", [
                    "auth",
                    "token",
                    "--output",
                    "json",
                    ...scopes.reduce((previous, current)=>previous.concat("--scope", current), []),
                    ...tenantSection
                ], {
                    cwd: developerCliCredentialInternals.getSafeWorkingDir(),
                    timeout
                }, (error, stdout, stderr)=>{
                    resolve({
                        stdout,
                        stderr,
                        error
                    });
                });
            } catch (err) {
                reject(err);
            }
        });
    }
};
class AzureDeveloperCliCredential {
    /**
     * Creates an instance of the {@link AzureDeveloperCliCredential}.
     *
     * To use this credential, ensure that you have already logged
     * in via the 'azd' tool using the command "azd auth login" from the commandline.
     *
     * @param options - Options, to optionally allow multi-tenant requests.
     */ constructor(options){
        if (options === null || options === void 0 ? void 0 : options.tenantId) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, options === null || options === void 0 ? void 0 : options.tenantId);
            this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;
        }
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        this.timeout = options === null || options === void 0 ? void 0 : options.processTimeoutInMs;
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        const tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, options, this.additionallyAllowedTenantIds);
        if (tenantId) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, tenantId);
        }
        let scopeList;
        if (typeof scopes === "string") {
            scopeList = [
                scopes
            ];
        } else {
            scopeList = scopes;
        }
        logger.getToken.info(`Using the scopes ${scopes}`);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async ()=>{
            var _a, _b, _c, _d;
            try {
                scopeList.forEach((scope)=>{
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureValidScopeForDevTimeCreds"])(scope, logger);
                });
                const obj = await developerCliCredentialInternals.getAzdAccessToken(scopeList, tenantId, this.timeout);
                const isNotLoggedInError = ((_a = obj.stderr) === null || _a === void 0 ? void 0 : _a.match("not logged in, run `azd login` to login")) || ((_b = obj.stderr) === null || _b === void 0 ? void 0 : _b.match("not logged in, run `azd auth login` to login"));
                const isNotInstallError = ((_c = obj.stderr) === null || _c === void 0 ? void 0 : _c.match("azd:(.*)not found")) || ((_d = obj.stderr) === null || _d === void 0 ? void 0 : _d.startsWith("'azd' is not recognized"));
                if (isNotInstallError || obj.error && obj.error.code === "ENOENT") {
                    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("Azure Developer CLI couldn't be found. To mitigate this issue, see the troubleshooting guidelines at https://aka.ms/azsdk/js/identity/azdevclicredential/troubleshoot.");
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
                    throw error;
                }
                if (isNotLoggedInError) {
                    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("Please run 'azd auth login' from a command prompt to authenticate before using this credential. For more information, see the troubleshooting guidelines at https://aka.ms/azsdk/js/identity/azdevclicredential/troubleshoot.");
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
                    throw error;
                }
                try {
                    const resp = JSON.parse(obj.stdout);
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
                    return {
                        token: resp.token,
                        expiresOnTimestamp: new Date(resp.expiresOn).getTime(),
                        tokenType: "Bearer"
                    };
                } catch (e) {
                    if (obj.stderr) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](obj.stderr);
                    }
                    throw e;
                }
            } catch (err) {
                const error = err.name === "CredentialUnavailableError" ? err : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](err.message || "Unknown error while trying to retrieve the access token");
                logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, error));
                throw error;
            }
        });
    }
} //# sourceMappingURL=azureDeveloperCliCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/util/processUtils.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "processUtils": (()=>processUtils)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$child_process__$5b$external$5d$__$28$child_process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/child_process [external] (child_process, cjs)");
;
const processUtils = {
    /**
     * Promisifying childProcess.execFile
     * @internal
     */ execFile (file, params, options) {
        return new Promise((resolve, reject)=>{
            (0, __TURBOPACK__imported__module__$5b$externals$5d2f$child_process__$5b$external$5d$__$28$child_process$2c$__cjs$29$__["execFile"])(file, params, options, (error, stdout, stderr)=>{
                if (Buffer.isBuffer(stdout)) {
                    stdout = stdout.toString("utf8");
                }
                if (Buffer.isBuffer(stderr)) {
                    stderr = stderr.toString("utf8");
                }
                if (stderr || error) {
                    reject(stderr ? new Error(stderr) : error);
                } else {
                    resolve(stdout);
                }
            });
        });
    }
}; //# sourceMappingURL=processUtils.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/azurePowerShellCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AzurePowerShellCredential": (()=>AzurePowerShellCredential),
    "commandStack": (()=>commandStack),
    "formatCommand": (()=>formatCommand),
    "parseJsonToken": (()=>parseJsonToken),
    "powerShellErrors": (()=>powerShellErrors),
    "powerShellPublicErrorMessages": (()=>powerShellPublicErrorMessages)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("AzurePowerShellCredential");
const isWindows = process.platform === "win32";
function formatCommand(commandName) {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    } else {
        return commandName;
    }
}
/**
 * Receives a list of commands to run, executes them, then returns the outputs.
 * If anything fails, an error is thrown.
 * @internal
 */ async function runCommands(commands, timeout) {
    const results = [];
    for (const command of commands){
        const [file, ...parameters] = command;
        const result = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processUtils"].execFile(file, parameters, {
            encoding: "utf8",
            timeout
        });
        results.push(result);
    }
    return results;
}
const powerShellErrors = {
    login: "Run Connect-AzAccount to login",
    installed: "The specified module 'Az.Accounts' with version '2.2.0' was not loaded because no valid module file was found in any module directory"
};
const powerShellPublicErrorMessages = {
    login: "Please run 'Connect-AzAccount' from PowerShell to authenticate before using this credential.",
    installed: `The 'Az.Account' module >= 2.2.0 is not installed. Install the Azure Az PowerShell module with: "Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force".`,
    troubleshoot: `To troubleshoot, visit https://aka.ms/azsdk/js/identity/powershellcredential/troubleshoot.`
};
// PowerShell Azure User not logged in error check.
const isLoginError = (err)=>err.message.match(`(.*)${powerShellErrors.login}(.*)`);
// Az Module not Installed in Azure PowerShell check.
const isNotInstalledError = (err)=>err.message.match(powerShellErrors.installed);
const commandStack = [
    formatCommand("pwsh")
];
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
}
class AzurePowerShellCredential {
    /**
     * Creates an instance of the {@link AzurePowerShellCredential}.
     *
     * To use this credential:
     * - Install the Azure Az PowerShell module with:
     *   `Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force`.
     * - You have already logged in to Azure PowerShell using the command
     * `Connect-AzAccount` from the command line.
     *
     * @param options - Options, to optionally allow multi-tenant requests.
     */ constructor(options){
        if (options === null || options === void 0 ? void 0 : options.tenantId) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, options === null || options === void 0 ? void 0 : options.tenantId);
            this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;
        }
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        this.timeout = options === null || options === void 0 ? void 0 : options.processTimeoutInMs;
    }
    /**
     * Gets the access token from Azure PowerShell
     * @param resource - The resource to use when getting the token
     */ async getAzurePowerShellAccessToken(resource, tenantId, timeout) {
        // Clone the stack to avoid mutating it while iterating
        for (const powerShellCommand of [
            ...commandStack
        ]){
            try {
                await runCommands([
                    [
                        powerShellCommand,
                        "/?"
                    ]
                ], timeout);
            } catch (e) {
                // Remove this credential from the original stack so that we don't try it again.
                commandStack.shift();
                continue;
            }
            const results = await runCommands([
                [
                    powerShellCommand,
                    "-NoProfile",
                    "-NonInteractive",
                    "-Command",
                    `
          $tenantId = "${tenantId !== null && tenantId !== void 0 ? tenantId : ""}"
          $m = Import-Module Az.Accounts -MinimumVersion 2.2.0 -PassThru
          $useSecureString = $m.Version -ge [version]'2.17.0'

          $params = @{
            ResourceUrl = "${resource}"
          }

          if ($tenantId.Length -gt 0) {
            $params["TenantId"] = $tenantId
          }

          if ($useSecureString) {
            $params["AsSecureString"] = $true
          }

          $token = Get-AzAccessToken @params

          $result = New-Object -TypeName PSObject
          $result | Add-Member -MemberType NoteProperty -Name ExpiresOn -Value $token.ExpiresOn
          if ($useSecureString) {
            $result | Add-Member -MemberType NoteProperty -Name Token -Value (ConvertFrom-SecureString -AsPlainText $token.Token)
          } else {
            $result | Add-Member -MemberType NoteProperty -Name Token -Value $token.Token
          }

          Write-Output (ConvertTo-Json $result)
          `
                ]
            ]);
            const result = results[0];
            return parseJsonToken(result);
        }
        throw new Error(`Unable to execute PowerShell. Ensure that it is installed in your system`);
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If the authentication cannot be performed through PowerShell, a {@link CredentialUnavailableError} will be thrown.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async ()=>{
            const tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, options, this.additionallyAllowedTenantIds);
            const scope = typeof scopes === "string" ? scopes : scopes[0];
            if (tenantId) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, tenantId);
            }
            try {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureValidScopeForDevTimeCreds"])(scope, logger);
                logger.getToken.info(`Using the scope ${scope}`);
                const resource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getScopeResource"])(scope);
                const response = await this.getAzurePowerShellAccessToken(resource, tenantId, this.timeout);
                logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
                return {
                    token: response.Token,
                    expiresOnTimestamp: new Date(response.ExpiresOn).getTime(),
                    tokenType: "Bearer"
                };
            } catch (err) {
                if (isNotInstalledError(err)) {
                    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](powerShellPublicErrorMessages.installed);
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scope, error));
                    throw error;
                } else if (isLoginError(err)) {
                    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](powerShellPublicErrorMessages.login);
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scope, error));
                    throw error;
                }
                const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${err}. ${powerShellPublicErrorMessages.troubleshoot}`);
                logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scope, error));
                throw error;
            }
        });
    }
}
async function parseJsonToken(result) {
    const jsonRegex = /{[^{}]*}/g;
    const matches = result.match(jsonRegex);
    let resultWithoutToken = result;
    if (matches) {
        try {
            for (const item of matches){
                try {
                    const jsonContent = JSON.parse(item);
                    if (jsonContent === null || jsonContent === void 0 ? void 0 : jsonContent.Token) {
                        resultWithoutToken = resultWithoutToken.replace(item, "");
                        if (resultWithoutToken) {
                            logger.getToken.warning(resultWithoutToken);
                        }
                        return jsonContent;
                    }
                } catch (e) {
                    continue;
                }
            }
        } catch (e) {
            throw new Error(`Unable to parse the output of PowerShell. Received output: ${result}`);
        }
    }
    throw new Error(`No access token found in the output. Received output: ${result}`);
} //# sourceMappingURL=azurePowerShellCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/chainedTokenCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "ChainedTokenCredential": (()=>ChainedTokenCredential),
    "logger": (()=>logger)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("ChainedTokenCredential");
class ChainedTokenCredential {
    /**
     * Creates an instance of ChainedTokenCredential using the given credentials.
     *
     * @param sources - `TokenCredential` implementations to be tried in order.
     *
     * Example usage:
     * ```ts snippet:chained_token_credential_example
     * import { ClientSecretCredential, ChainedTokenCredential } from "@azure/identity";
     *
     * const tenantId = "<tenant-id>";
     * const clientId = "<client-id>";
     * const clientSecret = "<client-secret>";
     * const anotherClientId = "<another-client-id>";
     * const anotherSecret = "<another-client-secret>";
     *
     * const firstCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);
     * const secondCredential = new ClientSecretCredential(tenantId, anotherClientId, anotherSecret);
     *
     * const credentialChain = new ChainedTokenCredential(firstCredential, secondCredential);
     * ```
     */ constructor(...sources){
        this._sources = [];
        this._sources = sources;
    }
    /**
     * Returns the first access token returned by one of the chained
     * `TokenCredential` implementations.  Throws an {@link AggregateAuthenticationError}
     * when one or more credentials throws an {@link AuthenticationError} and
     * no credentials have returned an access token.
     *
     * This method is called automatically by Azure SDK client libraries. You may call this method
     * directly, but you must also handle token caching and token refreshing.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                `TokenCredential` implementation might make.
     */ async getToken(scopes, options = {}) {
        const { token } = await this.getTokenInternal(scopes, options);
        return token;
    }
    async getTokenInternal(scopes, options = {}) {
        let token = null;
        let successfulCredential;
        const errors = [];
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan("ChainedTokenCredential.getToken", options, async (updatedOptions)=>{
            for(let i = 0; i < this._sources.length && token === null; i++){
                try {
                    token = await this._sources[i].getToken(scopes, updatedOptions);
                    successfulCredential = this._sources[i];
                } catch (err) {
                    if (err.name === "CredentialUnavailableError" || err.name === "AuthenticationRequiredError") {
                        errors.push(err);
                    } else {
                        logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, err));
                        throw err;
                    }
                }
            }
            if (!token && errors.length > 0) {
                const err = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AggregateAuthenticationError"](errors, "ChainedTokenCredential authentication failed.");
                logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, err));
                throw err;
            }
            logger.getToken.info(`Result for ${successfulCredential.constructor.name}: ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes)}`);
            if (token === null) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("Failed to retrieve a valid token");
            }
            return {
                token,
                successfulCredential
            };
        });
    }
} //# sourceMappingURL=chainedTokenCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/clientCertificateCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "ClientCertificateCredential": (()=>ClientCertificateCredential),
    "parseCertificate": (()=>parseCertificate)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$crypto__$5b$external$5d$__$28$node$3a$crypto$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:crypto [external] (node:crypto, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs/promises [external] (node:fs/promises, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const credentialName = "ClientCertificateCredential";
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])(credentialName);
class ClientCertificateCredential {
    constructor(tenantId, clientId, certificatePathOrConfiguration, options = {}){
        if (!tenantId || !clientId) {
            throw new Error(`${credentialName}: tenantId and clientId are required parameters.`);
        }
        this.tenantId = tenantId;
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        this.sendCertificateChain = options.sendCertificateChain;
        this.certificateConfiguration = Object.assign({}, typeof certificatePathOrConfiguration === "string" ? {
            certificatePath: certificatePathOrConfiguration
        } : certificatePathOrConfiguration);
        const certificate = this.certificateConfiguration.certificate;
        const certificatePath = this.certificateConfiguration.certificatePath;
        if (!this.certificateConfiguration || !(certificate || certificatePath)) {
            throw new Error(`${credentialName}: Provide either a PEM certificate in string form, or the path to that certificate in the filesystem. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);
        }
        if (certificate && certificatePath) {
            throw new Error(`${credentialName}: To avoid unexpected behaviors, providing both the contents of a PEM certificate and the path to a PEM certificate is forbidden. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);
        }
        this.msalClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMsalClient"])(clientId, tenantId, Object.assign(Object.assign({}, options), {
            logger,
            tokenCredentialOptions: options
        }));
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${credentialName}.getToken`, options, async (newOptions)=>{
            newOptions.tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);
            const arrayScopes = Array.isArray(scopes) ? scopes : [
                scopes
            ];
            const certificate = await this.buildClientCertificate();
            return this.msalClient.getTokenByClientCertificate(arrayScopes, certificate, newOptions);
        });
    }
    async buildClientCertificate() {
        var _a;
        const parts = await parseCertificate(this.certificateConfiguration, (_a = this.sendCertificateChain) !== null && _a !== void 0 ? _a : false);
        let privateKey;
        if (this.certificateConfiguration.certificatePassword !== undefined) {
            privateKey = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$crypto__$5b$external$5d$__$28$node$3a$crypto$2c$__cjs$29$__["createPrivateKey"])({
                key: parts.certificateContents,
                passphrase: this.certificateConfiguration.certificatePassword,
                format: "pem"
            }).export({
                format: "pem",
                type: "pkcs8"
            }).toString();
        } else {
            privateKey = parts.certificateContents;
        }
        return {
            thumbprint: parts.thumbprint,
            thumbprintSha256: parts.thumbprintSha256,
            privateKey,
            x5c: parts.x5c
        };
    }
}
async function parseCertificate(certificateConfiguration, sendCertificateChain) {
    const certificate = certificateConfiguration.certificate;
    const certificatePath = certificateConfiguration.certificatePath;
    const certificateContents = certificate || await (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__["readFile"])(certificatePath, "utf8");
    const x5c = sendCertificateChain ? certificateContents : undefined;
    const certificatePattern = /(-+BEGIN CERTIFICATE-+)(\n\r?|\r\n?)([A-Za-z0-9+/\n\r]+=*)(\n\r?|\r\n?)(-+END CERTIFICATE-+)/g;
    const publicKeys = [];
    // Match all possible certificates, in the order they are in the file. These will form the chain that is used for x5c
    let match;
    do {
        match = certificatePattern.exec(certificateContents);
        if (match) {
            publicKeys.push(match[3]);
        }
    }while (match)
    if (publicKeys.length === 0) {
        throw new Error("The file at the specified path does not contain a PEM-encoded certificate.");
    }
    const thumbprint = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$crypto__$5b$external$5d$__$28$node$3a$crypto$2c$__cjs$29$__["createHash"])("sha1").update(Buffer.from(publicKeys[0], "base64")).digest("hex").toUpperCase();
    const thumbprintSha256 = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$crypto__$5b$external$5d$__$28$node$3a$crypto$2c$__cjs$29$__["createHash"])("sha256").update(Buffer.from(publicKeys[0], "base64")).digest("hex").toUpperCase();
    return {
        certificateContents,
        thumbprintSha256,
        thumbprint,
        x5c
    };
} //# sourceMappingURL=clientCertificateCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/clientSecretCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "ClientSecretCredential": (()=>ClientSecretCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("ClientSecretCredential");
class ClientSecretCredential {
    /**
     * Creates an instance of the ClientSecretCredential with the details
     * needed to authenticate against Microsoft Entra ID with a client
     * secret.
     *
     * @param tenantId - The Microsoft Entra tenant (directory) ID.
     * @param clientId - The client (application) ID of an App Registration in the tenant.
     * @param clientSecret - A client secret that was generated for the App Registration.
     * @param options - Options for configuring the client which makes the authentication request.
     */ constructor(tenantId, clientId, clientSecret, options = {}){
        if (!tenantId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("ClientSecretCredential: tenantId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.");
        }
        if (!clientId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("ClientSecretCredential: clientId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.");
        }
        if (!clientSecret) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("ClientSecretCredential: clientSecret is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.");
        }
        this.clientSecret = clientSecret;
        this.tenantId = tenantId;
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        this.msalClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMsalClient"])(clientId, tenantId, Object.assign(Object.assign({}, options), {
            logger,
            tokenCredentialOptions: options
        }));
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{
            newOptions.tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);
            const arrayScopes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureScopes"])(scopes);
            return this.msalClient.getTokenByClientSecret(arrayScopes, this.clientSecret, newOptions);
        });
    }
} //# sourceMappingURL=clientSecretCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/usernamePasswordCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "UsernamePasswordCredential": (()=>UsernamePasswordCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("UsernamePasswordCredential");
class UsernamePasswordCredential {
    /**
     * Creates an instance of the UsernamePasswordCredential with the details
     * needed to authenticate against Microsoft Entra ID with a username
     * and password.
     *
     * @param tenantId - The Microsoft Entra tenant (directory).
     * @param clientId - The client (application) ID of an App Registration in the tenant.
     * @param username - The user account's e-mail address (user name).
     * @param password - The user account's account password
     * @param options - Options for configuring the client which makes the authentication request.
     */ constructor(tenantId, clientId, username, password, options = {}){
        if (!tenantId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("UsernamePasswordCredential: tenantId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.");
        }
        if (!clientId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("UsernamePasswordCredential: clientId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.");
        }
        if (!username) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("UsernamePasswordCredential: username is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.");
        }
        if (!password) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"]("UsernamePasswordCredential: password is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.");
        }
        this.tenantId = tenantId;
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        this.username = username;
        this.password = password;
        this.msalClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMsalClient"])(clientId, this.tenantId, Object.assign(Object.assign({}, options), {
            tokenCredentialOptions: options !== null && options !== void 0 ? options : {}
        }));
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * If the user provided the option `disableAutomaticAuthentication`,
     * once the token can't be retrieved silently,
     * this method won't attempt to request user interaction to retrieve the token.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{
            newOptions.tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);
            const arrayScopes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureScopes"])(scopes);
            return this.msalClient.getTokenByUsernamePassword(arrayScopes, this.username, this.password, newOptions);
        });
    }
} //# sourceMappingURL=usernamePasswordCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/environmentCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AllSupportedEnvironmentVariables": (()=>AllSupportedEnvironmentVariables),
    "EnvironmentCredential": (()=>EnvironmentCredential),
    "getSendCertificateChain": (()=>getSendCertificateChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientCertificateCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientCertificateCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientSecretCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientSecretCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$usernamePasswordCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/usernamePasswordCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
const AllSupportedEnvironmentVariables = [
    "AZURE_TENANT_ID",
    "AZURE_CLIENT_ID",
    "AZURE_CLIENT_SECRET",
    "AZURE_CLIENT_CERTIFICATE_PATH",
    "AZURE_CLIENT_CERTIFICATE_PASSWORD",
    "AZURE_USERNAME",
    "AZURE_PASSWORD",
    "AZURE_ADDITIONALLY_ALLOWED_TENANTS",
    "AZURE_CLIENT_SEND_CERTIFICATE_CHAIN"
];
function getAdditionallyAllowedTenants() {
    var _a;
    const additionallyAllowedValues = (_a = process.env.AZURE_ADDITIONALLY_ALLOWED_TENANTS) !== null && _a !== void 0 ? _a : "";
    return additionallyAllowedValues.split(";");
}
const credentialName = "EnvironmentCredential";
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])(credentialName);
function getSendCertificateChain() {
    var _a;
    const sendCertificateChain = ((_a = process.env.AZURE_CLIENT_SEND_CERTIFICATE_CHAIN) !== null && _a !== void 0 ? _a : "").toLowerCase();
    const result = sendCertificateChain === "true" || sendCertificateChain === "1";
    logger.verbose(`AZURE_CLIENT_SEND_CERTIFICATE_CHAIN: ${process.env.AZURE_CLIENT_SEND_CERTIFICATE_CHAIN}; sendCertificateChain: ${result}`);
    return result;
}
class EnvironmentCredential {
    /**
     * Creates an instance of the EnvironmentCredential class and decides what credential to use depending on the available environment variables.
     *
     * Required environment variables:
     * - `AZURE_TENANT_ID`: The Microsoft Entra tenant (directory) ID.
     * - `AZURE_CLIENT_ID`: The client (application) ID of an App Registration in the tenant.
     *
     * If setting the AZURE_TENANT_ID, then you can also set the additionally allowed tenants
     * - `AZURE_ADDITIONALLY_ALLOWED_TENANTS`: For multi-tenant applications, specifies additional tenants for which the credential may acquire tokens with a single semicolon delimited string. Use * to allow all tenants.
     *
     * Environment variables used for client credential authentication:
     * - `AZURE_CLIENT_SECRET`: A client secret that was generated for the App Registration.
     * - `AZURE_CLIENT_CERTIFICATE_PATH`: The path to a PEM certificate to use during the authentication, instead of the client secret.
     * - `AZURE_CLIENT_CERTIFICATE_PASSWORD`: (optional) password for the certificate file.
     * - `AZURE_CLIENT_SEND_CERTIFICATE_CHAIN`: (optional) indicates that the certificate chain should be set in x5c header to support subject name / issuer based authentication.
     *
     * Username and password authentication is deprecated, since it doesn't support multifactor authentication (MFA). See https://aka.ms/azsdk/identity/mfa for more details. Users can still provide environment variables for this authentication method:
     * - `AZURE_USERNAME`: Username to authenticate with.
     * - `AZURE_PASSWORD`: Password to authenticate with.
     *
     * If the environment variables required to perform the authentication are missing, a {@link CredentialUnavailableError} will be thrown.
     * If the authentication fails, or if there's an unknown error, an {@link AuthenticationError} will be thrown.
     *
     * @param options - Options for configuring the client which makes the authentication request.
     */ constructor(options){
        // Keep track of any missing environment variables for error details
        this._credential = undefined;
        const assigned = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processEnvVars"])(AllSupportedEnvironmentVariables).assigned.join(", ");
        logger.info(`Found the following environment variables: ${assigned}`);
        const tenantId = process.env.AZURE_TENANT_ID, clientId = process.env.AZURE_CLIENT_ID, clientSecret = process.env.AZURE_CLIENT_SECRET;
        const additionallyAllowedTenantIds = getAdditionallyAllowedTenants();
        const sendCertificateChain = getSendCertificateChain();
        const newOptions = Object.assign(Object.assign({}, options), {
            additionallyAllowedTenantIds,
            sendCertificateChain
        });
        if (tenantId) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, tenantId);
        }
        if (tenantId && clientId && clientSecret) {
            logger.info(`Invoking ClientSecretCredential with tenant ID: ${tenantId}, clientId: ${clientId} and clientSecret: [REDACTED]`);
            this._credential = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientSecretCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ClientSecretCredential"](tenantId, clientId, clientSecret, newOptions);
            return;
        }
        const certificatePath = process.env.AZURE_CLIENT_CERTIFICATE_PATH;
        const certificatePassword = process.env.AZURE_CLIENT_CERTIFICATE_PASSWORD;
        if (tenantId && clientId && certificatePath) {
            logger.info(`Invoking ClientCertificateCredential with tenant ID: ${tenantId}, clientId: ${clientId} and certificatePath: ${certificatePath}`);
            this._credential = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientCertificateCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ClientCertificateCredential"](tenantId, clientId, {
                certificatePath,
                certificatePassword
            }, newOptions);
            return;
        }
        const username = process.env.AZURE_USERNAME;
        const password = process.env.AZURE_PASSWORD;
        if (tenantId && clientId && username && password) {
            logger.info(`Invoking UsernamePasswordCredential with tenant ID: ${tenantId}, clientId: ${clientId} and username: ${username}`);
            logger.warning("Environment is configured to use username and password authentication. This authentication method is deprecated, as it doesn't support multifactor authentication (MFA). Use a more secure credential. For more details, see https://aka.ms/azsdk/identity/mfa.");
            this._credential = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$usernamePasswordCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UsernamePasswordCredential"](tenantId, clientId, username, password, newOptions);
        }
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - Optional parameters. See {@link GetTokenOptions}.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${credentialName}.getToken`, options, async (newOptions)=>{
            if (this._credential) {
                try {
                    const result = await this._credential.getToken(scopes, newOptions);
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSuccess"])(scopes));
                    return result;
                } catch (err) {
                    const authenticationError = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationError"](400, {
                        error: `${credentialName} authentication failed. To troubleshoot, visit https://aka.ms/azsdk/js/identity/environmentcredential/troubleshoot.`,
                        error_description: err.message.toString().split("More details:").join("")
                    });
                    logger.getToken.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])(scopes, authenticationError));
                    throw authenticationError;
                }
            }
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName} is unavailable. No underlying credential could be used. To troubleshoot, visit https://aka.ms/azsdk/js/identity/environmentcredential/troubleshoot.`);
        });
    }
} //# sourceMappingURL=environmentCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/defaultAzureCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "DefaultAzureCredential": (()=>DefaultAzureCredential),
    "UnavailableDefaultCredential": (()=>UnavailableDefaultCredential),
    "createDefaultManagedIdentityCredential": (()=>createDefaultManagedIdentityCredential),
    "createEnvironmentCredential": (()=>createEnvironmentCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azureCliCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azureCliCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azureDeveloperCliCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azureDeveloperCliCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azurePowerShellCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azurePowerShellCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$chainedTokenCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/chainedTokenCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$environmentCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/environmentCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$workloadIdentityCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/workloadIdentityCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("DefaultAzureCredential");
function createDefaultManagedIdentityCredential(options = {}) {
    var _a, _b, _c, _d;
    (_a = options.retryOptions) !== null && _a !== void 0 ? _a : options.retryOptions = {
        maxRetries: 5,
        retryDelayInMs: 800
    };
    const managedIdentityClientId = (_b = options === null || options === void 0 ? void 0 : options.managedIdentityClientId) !== null && _b !== void 0 ? _b : process.env.AZURE_CLIENT_ID;
    const workloadIdentityClientId = (_c = options === null || options === void 0 ? void 0 : options.workloadIdentityClientId) !== null && _c !== void 0 ? _c : managedIdentityClientId;
    const managedResourceId = options === null || options === void 0 ? void 0 : options.managedIdentityResourceId;
    const workloadFile = process.env.AZURE_FEDERATED_TOKEN_FILE;
    const tenantId = (_d = options === null || options === void 0 ? void 0 : options.tenantId) !== null && _d !== void 0 ? _d : process.env.AZURE_TENANT_ID;
    if (managedResourceId) {
        const managedIdentityResourceIdOptions = Object.assign(Object.assign({}, options), {
            resourceId: managedResourceId
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ManagedIdentityCredential"](managedIdentityResourceIdOptions);
    }
    if (workloadFile && workloadIdentityClientId) {
        const workloadIdentityCredentialOptions = Object.assign(Object.assign({}, options), {
            tenantId: tenantId
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ManagedIdentityCredential"](workloadIdentityClientId, workloadIdentityCredentialOptions);
    }
    if (managedIdentityClientId) {
        const managedIdentityClientOptions = Object.assign(Object.assign({}, options), {
            clientId: managedIdentityClientId
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ManagedIdentityCredential"](managedIdentityClientOptions);
    }
    // We may be able to return a UnavailableCredential here, but that may be a breaking change
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ManagedIdentityCredential"](options);
}
/**
 * Creates a {@link WorkloadIdentityCredential} from the provided options.
 * @param options - Options to configure the credential.
 *
 * @internal
 */ function createDefaultWorkloadIdentityCredential(options) {
    var _a, _b, _c;
    const managedIdentityClientId = (_a = options === null || options === void 0 ? void 0 : options.managedIdentityClientId) !== null && _a !== void 0 ? _a : process.env.AZURE_CLIENT_ID;
    const workloadIdentityClientId = (_b = options === null || options === void 0 ? void 0 : options.workloadIdentityClientId) !== null && _b !== void 0 ? _b : managedIdentityClientId;
    const workloadFile = process.env.AZURE_FEDERATED_TOKEN_FILE;
    const tenantId = (_c = options === null || options === void 0 ? void 0 : options.tenantId) !== null && _c !== void 0 ? _c : process.env.AZURE_TENANT_ID;
    if (workloadFile && workloadIdentityClientId) {
        const workloadIdentityCredentialOptions = Object.assign(Object.assign({}, options), {
            tenantId,
            clientId: workloadIdentityClientId,
            tokenFilePath: workloadFile
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$workloadIdentityCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WorkloadIdentityCredential"](workloadIdentityCredentialOptions);
    }
    if (tenantId) {
        const workloadIdentityClientTenantOptions = Object.assign(Object.assign({}, options), {
            tenantId
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$workloadIdentityCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WorkloadIdentityCredential"](workloadIdentityClientTenantOptions);
    }
    // We may be able to return a UnavailableCredential here, but that may be a breaking change
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$workloadIdentityCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WorkloadIdentityCredential"](options);
}
/**
 * Creates a {@link AzureDeveloperCliCredential} from the provided options.
 * @param options - Options to configure the credential.
 *
 * @internal
 */ function createDefaultAzureDeveloperCliCredential(options = {}) {
    const processTimeoutInMs = options.processTimeoutInMs;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azureDeveloperCliCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AzureDeveloperCliCredential"](Object.assign({
        processTimeoutInMs
    }, options));
}
/**
 * Creates a {@link AzureCliCredential} from the provided options.
 * @param options - Options to configure the credential.
 *
 * @internal
 */ function createDefaultAzureCliCredential(options = {}) {
    const processTimeoutInMs = options.processTimeoutInMs;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azureCliCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AzureCliCredential"](Object.assign({
        processTimeoutInMs
    }, options));
}
/**
 * Creates a {@link AzurePowerShellCredential} from the provided options.
 * @param options - Options to configure the credential.
 *
 * @internal
 */ function createDefaultAzurePowershellCredential(options = {}) {
    const processTimeoutInMs = options.processTimeoutInMs;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azurePowerShellCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AzurePowerShellCredential"](Object.assign({
        processTimeoutInMs
    }, options));
}
function createEnvironmentCredential(options = {}) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$environmentCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EnvironmentCredential"](options);
}
class UnavailableDefaultCredential {
    constructor(credentialName, message){
        this.credentialName = credentialName;
        this.credentialUnavailableErrorMessage = message;
    }
    getToken() {
        logger.getToken.info(`Skipping ${this.credentialName}, reason: ${this.credentialUnavailableErrorMessage}`);
        return Promise.resolve(null);
    }
}
class DefaultAzureCredential extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$chainedTokenCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ChainedTokenCredential"] {
    constructor(options){
        // If AZURE_TOKEN_CREDENTIALS is not set, use the default credential chain.
        const azureTokenCredentials = process.env.AZURE_TOKEN_CREDENTIALS ? process.env.AZURE_TOKEN_CREDENTIALS.trim().toLowerCase() : undefined;
        const devCredentialFunctions = [
            createDefaultAzureCliCredential,
            createDefaultAzurePowershellCredential,
            createDefaultAzureDeveloperCliCredential
        ];
        const prodCredentialFunctions = [
            createEnvironmentCredential,
            createDefaultWorkloadIdentityCredential,
            createDefaultManagedIdentityCredential
        ];
        let credentialFunctions = [];
        // If AZURE_TOKEN_CREDENTIALS is set, use it to determine which credentials to use.
        // The value of AZURE_TOKEN_CREDENTIALS should be either "dev" or "prod".
        if (azureTokenCredentials) {
            switch(azureTokenCredentials){
                case "dev":
                    // If AZURE_TOKEN_CREDENTIALS is set to "dev", use the developer tool-based credential chain.
                    credentialFunctions = devCredentialFunctions;
                    break;
                case "prod":
                    // If AZURE_TOKEN_CREDENTIALS is set to "prod", use the production credential chain.
                    credentialFunctions = prodCredentialFunctions;
                    break;
                default:
                    {
                        // If AZURE_TOKEN_CREDENTIALS is set to an unsupported value, throw an error.
                        // We will throw an error here to prevent the creation of the DefaultAzureCredential.
                        const errorMessage = `Invalid value for AZURE_TOKEN_CREDENTIALS = ${process.env.AZURE_TOKEN_CREDENTIALS}. Valid values are 'prod' or 'dev'.`;
                        logger.warning(errorMessage);
                        throw new Error(errorMessage);
                    }
            }
        } else {
            // If AZURE_TOKEN_CREDENTIALS is not set, use the default credential chain.
            credentialFunctions = [
                ...prodCredentialFunctions,
                ...devCredentialFunctions
            ];
        }
        // Errors from individual credentials should not be thrown in the DefaultAzureCredential constructor, instead throwing on getToken() which is handled by ChainedTokenCredential.
        // When adding new credentials to the default chain, consider:
        // 1. Making the constructor parameters required and explicit
        // 2. Validating any required parameters in the factory function
        // 3. Returning a UnavailableDefaultCredential from the factory function if a credential is unavailable for any reason
        const credentials = credentialFunctions.map((createCredentialFn)=>{
            try {
                return createCredentialFn(options);
            } catch (err) {
                logger.warning(`Skipped ${createCredentialFn.name} because of an error creating the credential: ${err}`);
                return new UnavailableDefaultCredential(createCredentialFn.name, err.message);
            }
        });
        super(...credentials);
    }
} //# sourceMappingURL=defaultAzureCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/interactiveBrowserCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "InteractiveBrowserCredential": (()=>InteractiveBrowserCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("InteractiveBrowserCredential");
class InteractiveBrowserCredential {
    /**
     * Creates an instance of InteractiveBrowserCredential with the details needed.
     *
     * This credential uses the [Authorization Code Flow](https://learn.microsoft.com/entra/identity-platform/v2-oauth2-auth-code-flow).
     * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.
     * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.
     *
     * For Node.js, if a `clientId` is provided, the Microsoft Entra application will need to be configured to have a "Mobile and desktop applications" redirect endpoint.
     * Follow our guide on [setting up Redirect URIs for Desktop apps that calls to web APIs](https://learn.microsoft.com/entra/identity-platform/scenario-desktop-app-registration#redirect-uris).
     *
     * @param options - Options for configuring the client which makes the authentication requests.
     */ constructor(options){
        var _a, _b, _c, _d, _e;
        this.tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveTenantId"])(logger, options.tenantId, options.clientId);
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        const msalClientOptions = Object.assign(Object.assign({}, options), {
            tokenCredentialOptions: options,
            logger
        });
        const ibcNodeOptions = options;
        this.browserCustomizationOptions = ibcNodeOptions.browserCustomizationOptions;
        this.loginHint = ibcNodeOptions.loginHint;
        if ((_a = ibcNodeOptions === null || ibcNodeOptions === void 0 ? void 0 : ibcNodeOptions.brokerOptions) === null || _a === void 0 ? void 0 : _a.enabled) {
            if (!((_b = ibcNodeOptions === null || ibcNodeOptions === void 0 ? void 0 : ibcNodeOptions.brokerOptions) === null || _b === void 0 ? void 0 : _b.parentWindowHandle)) {
                throw new Error("In order to do WAM authentication, `parentWindowHandle` under `brokerOptions` is a required parameter");
            } else {
                msalClientOptions.brokerOptions = {
                    enabled: true,
                    parentWindowHandle: ibcNodeOptions.brokerOptions.parentWindowHandle,
                    legacyEnableMsaPassthrough: (_c = ibcNodeOptions.brokerOptions) === null || _c === void 0 ? void 0 : _c.legacyEnableMsaPassthrough,
                    useDefaultBrokerAccount: (_d = ibcNodeOptions.brokerOptions) === null || _d === void 0 ? void 0 : _d.useDefaultBrokerAccount
                };
            }
        }
        this.msalClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMsalClient"])((_e = options.clientId) !== null && _e !== void 0 ? _e : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DeveloperSignOnClientId"], this.tenantId, msalClientOptions);
        this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * If the user provided the option `disableAutomaticAuthentication`,
     * once the token can't be retrieved silently,
     * this method won't attempt to request user interaction to retrieve the token.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{
            newOptions.tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);
            const arrayScopes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureScopes"])(scopes);
            return this.msalClient.getTokenByInteractiveRequest(arrayScopes, Object.assign(Object.assign({}, newOptions), {
                disableAutomaticAuthentication: this.disableAutomaticAuthentication,
                browserCustomizationOptions: this.browserCustomizationOptions,
                loginHint: this.loginHint
            }));
        });
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * If the token can't be retrieved silently, this method will always generate a challenge for the user.
     *
     * On Node.js, this credential has [Proof Key for Code Exchange (PKCE)](https://datatracker.ietf.org/doc/html/rfc7636) enabled by default.
     * PKCE is a security feature that mitigates authentication code interception attacks.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                  TokenCredential implementation might make.
     */ async authenticate(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.authenticate`, options, async (newOptions)=>{
            const arrayScopes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureScopes"])(scopes);
            await this.msalClient.getTokenByInteractiveRequest(arrayScopes, Object.assign(Object.assign({}, newOptions), {
                disableAutomaticAuthentication: false,
                browserCustomizationOptions: this.browserCustomizationOptions,
                loginHint: this.loginHint
            }));
            return this.msalClient.getActiveAccount();
        });
    }
} //# sourceMappingURL=interactiveBrowserCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/deviceCodeCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "DeviceCodeCredential": (()=>DeviceCodeCredential),
    "defaultDeviceCodePromptCallback": (()=>defaultDeviceCodePromptCallback)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("DeviceCodeCredential");
function defaultDeviceCodePromptCallback(deviceCodeInfo) {
    console.log(deviceCodeInfo.message);
}
class DeviceCodeCredential {
    /**
     * Creates an instance of DeviceCodeCredential with the details needed
     * to initiate the device code authorization flow with Microsoft Entra ID.
     *
     * A message will be logged, giving users a code that they can use to authenticate once they go to https://microsoft.com/devicelogin
     *
     * Developers can configure how this message is shown by passing a custom `userPromptCallback`:
     *
     * ```ts snippet:device_code_credential_example
     * import { DeviceCodeCredential } from "@azure/identity";
     *
     * const credential = new DeviceCodeCredential({
     *   tenantId: process.env.AZURE_TENANT_ID,
     *   clientId: process.env.AZURE_CLIENT_ID,
     *   userPromptCallback: (info) => {
     *     console.log("CUSTOMIZED PROMPT CALLBACK", info.message);
     *   },
     * });
     * ```
     *
     * @param options - Options for configuring the client which makes the authentication requests.
     */ constructor(options){
        var _a, _b;
        this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        const clientId = (_a = options === null || options === void 0 ? void 0 : options.clientId) !== null && _a !== void 0 ? _a : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DeveloperSignOnClientId"];
        const tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveTenantId"])(logger, options === null || options === void 0 ? void 0 : options.tenantId, clientId);
        this.userPromptCallback = (_b = options === null || options === void 0 ? void 0 : options.userPromptCallback) !== null && _b !== void 0 ? _b : defaultDeviceCodePromptCallback;
        this.msalClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMsalClient"])(clientId, tenantId, Object.assign(Object.assign({}, options), {
            logger,
            tokenCredentialOptions: options || {}
        }));
        this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * If the user provided the option `disableAutomaticAuthentication`,
     * once the token can't be retrieved silently,
     * this method won't attempt to request user interaction to retrieve the token.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{
            newOptions.tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);
            const arrayScopes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureScopes"])(scopes);
            return this.msalClient.getTokenByDeviceCode(arrayScopes, this.userPromptCallback, Object.assign(Object.assign({}, newOptions), {
                disableAutomaticAuthentication: this.disableAutomaticAuthentication
            }));
        });
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * If the token can't be retrieved silently, this method will always generate a challenge for the user.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                  TokenCredential implementation might make.
     */ async authenticate(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.authenticate`, options, async (newOptions)=>{
            const arrayScopes = Array.isArray(scopes) ? scopes : [
                scopes
            ];
            await this.msalClient.getTokenByDeviceCode(arrayScopes, this.userPromptCallback, Object.assign(Object.assign({}, newOptions), {
                disableAutomaticAuthentication: false
            }));
            return this.msalClient.getActiveAccount();
        });
    }
} //# sourceMappingURL=deviceCodeCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/azurePipelinesCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AzurePipelinesCredential": (()=>AzurePipelinesCredential),
    "handleOidcResponse": (()=>handleOidcResponse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientAssertionCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientAssertionCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/client/identityClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const credentialName = "AzurePipelinesCredential";
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])(credentialName);
const OIDC_API_VERSION = "7.1";
class AzurePipelinesCredential {
    /**
     * AzurePipelinesCredential supports Federated Identity on Azure Pipelines through Service Connections.
     * @param tenantId - tenantId associated with the service connection
     * @param clientId - clientId associated with the service connection
     * @param serviceConnectionId - Unique ID for the service connection, as found in the querystring's resourceId key
     * @param systemAccessToken - The pipeline's <see href="https://learn.microsoft.com/azure/devops/pipelines/build/variables?view=azure-devops%26tabs=yaml#systemaccesstoken">System.AccessToken</see> value.
     * @param options - The identity client options to use for authentication.
     */ constructor(tenantId, clientId, serviceConnectionId, systemAccessToken, options = {}){
        var _a, _b;
        if (!clientId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. clientId is a required parameter.`);
        }
        if (!tenantId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. tenantId is a required parameter.`);
        }
        if (!serviceConnectionId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. serviceConnectionId is a required parameter.`);
        }
        if (!systemAccessToken) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. systemAccessToken is a required parameter.`);
        }
        // Allow these headers to be logged for troubleshooting by AzurePipelines.
        options.loggingOptions = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.loggingOptions), {
            additionalAllowedHeaderNames: [
                ...(_b = (_a = options.loggingOptions) === null || _a === void 0 ? void 0 : _a.additionalAllowedHeaderNames) !== null && _b !== void 0 ? _b : [],
                "x-vss-e2eid",
                "x-msedge-ref"
            ]
        });
        this.identityClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$client$2f$identityClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["IdentityClient"](options);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, tenantId);
        logger.info(`Invoking AzurePipelinesCredential with tenant ID: ${tenantId}, client ID: ${clientId}, and service connection ID: ${serviceConnectionId}`);
        if (!process.env.SYSTEM_OIDCREQUESTURI) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: is unavailable. Ensure that you're running this task in an Azure Pipeline, so that following missing system variable(s) can be defined- "SYSTEM_OIDCREQUESTURI"`);
        }
        const oidcRequestUrl = `${process.env.SYSTEM_OIDCREQUESTURI}?api-version=${OIDC_API_VERSION}&serviceConnectionId=${serviceConnectionId}`;
        logger.info(`Invoking ClientAssertionCredential with tenant ID: ${tenantId}, client ID: ${clientId} and service connection ID: ${serviceConnectionId}`);
        this.clientAssertionCredential = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientAssertionCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ClientAssertionCredential"](tenantId, clientId, this.requestOidcToken.bind(this, oidcRequestUrl, systemAccessToken), options);
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} or {@link AuthenticationError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options) {
        if (!this.clientAssertionCredential) {
            const errorMessage = `${credentialName}: is unavailable. To use Federation Identity in Azure Pipelines, the following parameters are required - 
      tenantId,
      clientId,
      serviceConnectionId,
      systemAccessToken,
      "SYSTEM_OIDCREQUESTURI".      
      See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/azurepipelinescredential/troubleshoot`;
            logger.error(errorMessage);
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](errorMessage);
        }
        logger.info("Invoking getToken() of Client Assertion Credential");
        return this.clientAssertionCredential.getToken(scopes, options);
    }
    /**
     *
     * @param oidcRequestUrl - oidc request url
     * @param systemAccessToken - system access token
     * @returns OIDC token from Azure Pipelines
     */ async requestOidcToken(oidcRequestUrl, systemAccessToken) {
        logger.info("Requesting OIDC token from Azure Pipelines...");
        logger.info(oidcRequestUrl);
        const request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createPipelineRequest"])({
            url: oidcRequestUrl,
            method: "POST",
            headers: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createHttpHeaders"])({
                "Content-Type": "application/json",
                Authorization: `Bearer ${systemAccessToken}`,
                // Prevents the service from responding with a redirect HTTP status code (useful for automation).
                "X-TFS-FedAuthRedirect": "Suppress"
            })
        });
        const response = await this.identityClient.sendRequest(request);
        return handleOidcResponse(response);
    }
}
function handleOidcResponse(response) {
    // OIDC token is present in `bodyAsText` field
    const text = response.bodyAsText;
    if (!text) {
        logger.error(`${credentialName}: Authentication Failed. Received null token from OIDC request. Response status- ${response.status}. Complete response - ${JSON.stringify(response)}`);
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationError"](response.status, {
            error: `${credentialName}: Authentication Failed. Received null token from OIDC request.`,
            error_description: `${JSON.stringify(response)}. See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/azurepipelinescredential/troubleshoot`
        });
    }
    try {
        const result = JSON.parse(text);
        if (result === null || result === void 0 ? void 0 : result.oidcToken) {
            return result.oidcToken;
        } else {
            const errorMessage = `${credentialName}: Authentication Failed. oidcToken field not detected in the response.`;
            let errorDescription = ``;
            if (response.status !== 200) {
                errorDescription = `Response body = ${text}. Response Headers ["x-vss-e2eid"] = ${response.headers.get("x-vss-e2eid")} and ["x-msedge-ref"] = ${response.headers.get("x-msedge-ref")}. See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/azurepipelinescredential/troubleshoot`;
            }
            logger.error(errorMessage);
            logger.error(errorDescription);
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationError"](response.status, {
                error: errorMessage,
                error_description: errorDescription
            });
        }
    } catch (e) {
        const errorDetails = `${credentialName}: Authentication Failed. oidcToken field not detected in the response.`;
        logger.error(`Response from service = ${text}, Response Headers ["x-vss-e2eid"] = ${response.headers.get("x-vss-e2eid")} 
      and ["x-msedge-ref"] = ${response.headers.get("x-msedge-ref")}, error message = ${e.message}`);
        logger.error(errorDetails);
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AuthenticationError"](response.status, {
            error: errorDetails,
            error_description: `Response = ${text}. Response headers ["x-vss-e2eid"] = ${response.headers.get("x-vss-e2eid")} and ["x-msedge-ref"] =  ${response.headers.get("x-msedge-ref")}. See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/azurepipelinescredential/troubleshoot`
        });
    }
} //# sourceMappingURL=azurePipelinesCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/authorizationCodeCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AuthorizationCodeCredential": (()=>AuthorizationCodeCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])("AuthorizationCodeCredential");
class AuthorizationCodeCredential {
    /**
     * @hidden
     * @internal
     */ constructor(tenantId, clientId, clientSecretOrAuthorizationCode, authorizationCodeOrRedirectUri, redirectUriOrOptions, options){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkTenantId"])(logger, tenantId);
        this.clientSecret = clientSecretOrAuthorizationCode;
        if (typeof redirectUriOrOptions === "string") {
            // the clientId+clientSecret constructor
            this.authorizationCode = authorizationCodeOrRedirectUri;
            this.redirectUri = redirectUriOrOptions;
        // in this case, options are good as they come
        } else {
            // clientId only
            this.authorizationCode = clientSecretOrAuthorizationCode;
            this.redirectUri = authorizationCodeOrRedirectUri;
            this.clientSecret = undefined;
            options = redirectUriOrOptions;
        }
        // TODO: Validate tenant if provided
        this.tenantId = tenantId;
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);
        this.msalClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMsalClient"])(clientId, tenantId, Object.assign(Object.assign({}, options), {
            logger,
            tokenCredentialOptions: options !== null && options !== void 0 ? options : {}
        }));
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure any requests this
     *                TokenCredential implementation might make.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{
            const tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, newOptions, this.additionallyAllowedTenantIds);
            newOptions.tenantId = tenantId;
            const arrayScopes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureScopes"])(scopes);
            return this.msalClient.getTokenByAuthorizationCode(arrayScopes, this.redirectUri, this.authorizationCode, this.clientSecret, Object.assign(Object.assign({}, newOptions), {
                disableAutomaticAuthentication: this.disableAutomaticAuthentication
            }));
        });
    }
} //# sourceMappingURL=authorizationCodeCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/credentials/onBehalfOfCredential.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "OnBehalfOfCredential": (()=>OnBehalfOfCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/nodeFlows/msalClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/processMultiTenantRequest.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tenantIdUtils.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$crypto__$5b$external$5d$__$28$node$3a$crypto$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:crypto [external] (node:crypto, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/scopeUtils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs/promises [external] (node:fs/promises, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/tracing.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
const credentialName = "OnBehalfOfCredential";
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["credentialLogger"])(credentialName);
class OnBehalfOfCredential {
    constructor(options){
        const { clientSecret } = options;
        const { certificatePath, sendCertificateChain } = options;
        const { getAssertion } = options;
        const { tenantId, clientId, userAssertionToken, additionallyAllowedTenants: additionallyAllowedTenantIds } = options;
        if (!tenantId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: tenantId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);
        }
        if (!clientId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: clientId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);
        }
        if (!clientSecret && !certificatePath && !getAssertion) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: You must provide one of clientSecret, certificatePath, or a getAssertion callback but none were provided. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);
        }
        if (!userAssertionToken) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CredentialUnavailableError"](`${credentialName}: userAssertionToken is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);
        }
        this.certificatePath = certificatePath;
        this.clientSecret = clientSecret;
        this.userAssertionToken = userAssertionToken;
        this.sendCertificateChain = sendCertificateChain;
        this.clientAssertion = getAssertion;
        this.tenantId = tenantId;
        this.additionallyAllowedTenantIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tenantIdUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolveAdditionallyAllowedTenantIds"])(additionallyAllowedTenantIds);
        this.msalClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$nodeFlows$2f$msalClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMsalClient"])(clientId, this.tenantId, Object.assign(Object.assign({}, options), {
            logger,
            tokenCredentialOptions: options
        }));
    }
    /**
     * Authenticates with Microsoft Entra ID and returns an access token if successful.
     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.
     *
     * @param scopes - The list of scopes for which the token will have access.
     * @param options - The options used to configure the underlying network requests.
     */ async getToken(scopes, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$tracing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tracingClient"].withSpan(`${credentialName}.getToken`, options, async (newOptions)=>{
            newOptions.tenantId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$processMultiTenantRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["processMultiTenantRequest"])(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);
            const arrayScopes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$scopeUtils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ensureScopes"])(scopes);
            if (this.certificatePath) {
                const clientCertificate = await this.buildClientCertificate(this.certificatePath);
                return this.msalClient.getTokenOnBehalfOf(arrayScopes, this.userAssertionToken, clientCertificate, newOptions);
            } else if (this.clientSecret) {
                return this.msalClient.getTokenOnBehalfOf(arrayScopes, this.userAssertionToken, this.clientSecret, options);
            } else if (this.clientAssertion) {
                return this.msalClient.getTokenOnBehalfOf(arrayScopes, this.userAssertionToken, this.clientAssertion, options);
            } else {
                // this is an invalid scenario and is a bug, as the constructor should have thrown an error if neither clientSecret nor certificatePath nor clientAssertion were provided
                throw new Error("Expected either clientSecret or certificatePath or clientAssertion to be defined.");
            }
        });
    }
    async buildClientCertificate(certificatePath) {
        try {
            const parts = await this.parseCertificate({
                certificatePath
            }, this.sendCertificateChain);
            return {
                thumbprint: parts.thumbprint,
                thumbprintSha256: parts.thumbprintSha256,
                privateKey: parts.certificateContents,
                x5c: parts.x5c
            };
        } catch (error) {
            logger.info((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatError"])("", error));
            throw error;
        }
    }
    async parseCertificate(configuration, sendCertificateChain) {
        const certificatePath = configuration.certificatePath;
        const certificateContents = await (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__["readFile"])(certificatePath, "utf8");
        const x5c = sendCertificateChain ? certificateContents : undefined;
        const certificatePattern = /(-+BEGIN CERTIFICATE-+)(\n\r?|\r\n?)([A-Za-z0-9+/\n\r]+=*)(\n\r?|\r\n?)(-+END CERTIFICATE-+)/g;
        const publicKeys = [];
        // Match all possible certificates, in the order they are in the file. These will form the chain that is used for x5c
        let match;
        do {
            match = certificatePattern.exec(certificateContents);
            if (match) {
                publicKeys.push(match[3]);
            }
        }while (match)
        if (publicKeys.length === 0) {
            throw new Error("The file at the specified path does not contain a PEM-encoded certificate.");
        }
        const thumbprint = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$crypto__$5b$external$5d$__$28$node$3a$crypto$2c$__cjs$29$__["createHash"])("sha1").update(Buffer.from(publicKeys[0], "base64")).digest("hex").toUpperCase();
        const thumbprintSha256 = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$crypto__$5b$external$5d$__$28$node$3a$crypto$2c$__cjs$29$__["createHash"])("sha256").update(Buffer.from(publicKeys[0], "base64")).digest("hex").toUpperCase();
        return {
            certificateContents,
            thumbprintSha256,
            thumbprint,
            x5c
        };
    }
} //# sourceMappingURL=onBehalfOfCredential.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/tokenProvider.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getBearerTokenProvider": (()=>getBearerTokenProvider)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$bearerTokenAuthenticationPolicy$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-rsc] (ecmascript)");
;
function getBearerTokenProvider(credential, scopes, options) {
    const { abortSignal, tracingOptions } = options || {};
    const pipeline = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createEmptyPipeline"])();
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$bearerTokenAuthenticationPolicy$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["bearerTokenAuthenticationPolicy"])({
        credential,
        scopes
    }));
    async function getRefreshedToken() {
        var _a;
        // Create a pipeline with just the bearer token policy
        // and run a dummy request through it to get the token
        const res = await pipeline.sendRequest({
            sendRequest: (request)=>Promise.resolve({
                    request,
                    status: 200,
                    headers: request.headers
                })
        }, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createPipelineRequest"])({
            url: "https://example.com",
            abortSignal,
            tracingOptions
        }));
        const accessToken = (_a = res.headers.get("authorization")) === null || _a === void 0 ? void 0 : _a.split(" ")[1];
        if (!accessToken) {
            throw new Error("Failed to get access token");
        }
        return accessToken;
    }
    return getRefreshedToken;
} //# sourceMappingURL=tokenProvider.js.map
}}),
"[project]/node_modules/@azure/identity/dist/esm/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getDefaultAzureCredential": (()=>getDefaultAzureCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$plugins$2f$consumer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/plugins/consumer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$defaultAzureCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/defaultAzureCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/utils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$chainedTokenCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/chainedTokenCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientSecretCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientSecretCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$environmentCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/environmentCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientCertificateCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientCertificateCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientAssertionCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientAssertionCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azureCliCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azureCliCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azureDeveloperCliCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azureDeveloperCliCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$interactiveBrowserCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/interactiveBrowserCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$deviceCodeCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/deviceCodeCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azurePipelinesCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azurePipelinesCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$authorizationCodeCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/authorizationCodeCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azurePowerShellCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azurePowerShellCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$usernamePasswordCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/usernamePasswordCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$visualStudioCodeCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/visualStudioCodeCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$onBehalfOfCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/onBehalfOfCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$workloadIdentityCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/workloadIdentityCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$tokenProvider$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/tokenProvider.js [app-rsc] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function getDefaultAzureCredential() {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$defaultAzureCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DefaultAzureCredential"]();
}
;
}}),
"[project]/node_modules/@azure/identity/dist/esm/index.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$plugins$2f$consumer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/plugins/consumer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$defaultAzureCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/defaultAzureCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$msal$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/msal/utils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$chainedTokenCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/chainedTokenCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientSecretCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientSecretCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$environmentCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/environmentCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientCertificateCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientCertificateCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$clientAssertionCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/clientAssertionCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azureCliCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azureCliCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azureDeveloperCliCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azureDeveloperCliCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$interactiveBrowserCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/interactiveBrowserCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$managedIdentityCredential$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/managedIdentityCredential/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$deviceCodeCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/deviceCodeCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azurePipelinesCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azurePipelinesCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$authorizationCodeCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/authorizationCodeCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$azurePowerShellCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/azurePowerShellCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$usernamePasswordCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/usernamePasswordCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$visualStudioCodeCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/visualStudioCodeCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$onBehalfOfCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/onBehalfOfCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$credentials$2f$workloadIdentityCredential$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/credentials/workloadIdentityCredential.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$util$2f$logging$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/util/logging.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$tokenProvider$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/tokenProvider.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$identity$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/identity/dist/esm/index.js [app-rsc] (ecmascript) <locals>");
}}),

};

//# sourceMappingURL=node_modules_%40azure_identity_dist_esm_faaa476a._.js.map