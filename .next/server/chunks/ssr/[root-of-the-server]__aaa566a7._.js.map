{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions/send-campaign-action.ts"],"sourcesContent":["'use server';\n\nimport nodemailer from 'nodemailer';\nimport mysql from 'mysql2/promise';\nimport { parse } from 'csv-parse/sync';\n\n/**\n * @fileoverview Acción de servidor para enviar una campaña de correo electrónico.\n * Obtiene destinatarios desde una consulta a la base de datos MySQL, un archivo CSV,\n * o una consulta SQL manual y envía el correo utilizando Nodemailer.\n */\n\n/**\n * Payload para la acción de enviar campaña.\n */\ninterface SendCampaignPayload {\n  subject: string;\n  htmlBody: string;\n  recipientData: {\n    type: 'date' | 'csv' | 'sql';\n    value: string; // Contendrá la fecha, el contenido del CSV o la consulta SQL\n  };\n}\n\n/**\n * Obtiene una lista de destinatarios desde la fuente especificada.\n * @param recipientData - El objeto que define la fuente de los destinatarios.\n * @returns Una promesa que se resuelve con un array de objetos de destinatarios.\n */\nasync function getRecipients(\n  recipientData: SendCampaignPayload['recipientData']\n): Promise<{ email: string }[]> {\n  const { type, value } = recipientData;\n\n  if (type === 'csv') {\n    try {\n      const records = parse(value, {\n        columns: true,\n        skip_empty_lines: true,\n      });\n      if (records.length === 0 || !('email' in records[0])) {\n        throw new Error('La columna \"email\" no se encontró o el archivo está vacío.');\n      }\n      return records.map((record: any) => ({ email: record.email })).filter((r: {email: string}) => r.email);\n    } catch (error) {\n      console.error('Error al procesar el archivo CSV:', error);\n      throw new Error(\n        `Error al procesar el archivo CSV: ${(error as Error).message}`\n      );\n    }\n  }\n\n  const { MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_PORT } =\n    process.env;\n\n  if (!MYSQL_HOST || !MYSQL_USER || !MYSQL_DATABASE) {\n    throw new Error(\n      'Faltan las variables de entorno de la base de datos. Por favor, configúralas.'\n    );\n  }\n\n  let connection;\n  try {\n    connection = await mysql.createConnection({\n      host: MYSQL_HOST,\n      port: MYSQL_PORT ? parseInt(MYSQL_PORT, 10) : 3306,\n      user: MYSQL_USER,\n      password: MYSQL_PASSWORD,\n      database: MYSQL_DATABASE,\n    });\n\n    let sql_query = '';\n    let params: any[] = [];\n\n    if (type === 'date') {\n      sql_query = `\n        SELECT t1.email\n        FROM order_data AS t1 INNER JOIN order_data_online AS t2 ON t1.Ds_Merchant_Order = t2.Ds_Order\n        WHERE\n            t1.fecha_visita = ?\n            AND t2.Ds_ErrorCode = '00'\n            AND t2.Ds_ErrorMessage = 'completed'\n            AND NOT t1.email IN ('alberto.silva@papalote.org.mx', 'alejandracervantesm@gmail.com')\n      `;\n      params = [value];\n    } else if (type === 'sql') {\n      sql_query = value;\n      // Nota: Ejecutar SQL directamente del usuario es un riesgo de seguridad.\n      // En una aplicación real, esto debería ser validado o restringido.\n    }\n\n    const [rows] = await connection.execute(sql_query, params);\n    return (rows as { email: string }[]).filter(row => row.email);\n\n  } catch (error) {\n    console.error('Error al conectar o consultar la base de datos:', error);\n    throw new Error('No se pudo obtener los contactos de la base de datos.');\n  } finally {\n    if (connection) await connection.end();\n  }\n}\n\n\n/**\n * Envía una campaña de correo a una lista de destinatarios obtenida\n * dinámicamente desde la fuente especificada.\n * @param payload - Los detalles de la campaña.\n * @returns Un objeto indicando el resultado de la operación.\n * @throws Arrojará un error si la configuración o el proceso de envío fallan.\n */\nexport async function sendCampaign(payload: SendCampaignPayload) {\n  const { subject, htmlBody, recipientData } = payload;\n  const startTime = Date.now();\n\n  const { SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS } = process.env;\n\n  if (!SMTP_HOST || !SMTP_PORT || !SMTP_USER || !SMTP_PASS) {\n    throw new Error(\n      'Faltan las variables de entorno SMTP. Por favor, configúralas.'\n    );\n  }\n  \n  const recipients = await getRecipients(recipientData);\n  \n  if (recipients.length === 0) {\n    return { \n        success: true, \n        message: `No se encontraron destinatarios. No se enviaron correos.`,\n        stats: {\n            sentCount: 0,\n            failedCount: 0,\n            totalRecipients: 0,\n            duration: 0\n        } \n    };\n  }\n\n  const totalRecipients = recipients.length;\n\n  const transporter = nodemailer.createTransport({\n    host: SMTP_HOST,\n    port: parseInt(SMTP_PORT, 10),\n    secure: parseInt(SMTP_PORT, 10) === 465,\n    auth: {\n      user: SMTP_USER,\n      pass: SMTP_PASS,\n    },\n  });\n\n  let sentCount = 0;\n  let failedCount = 0;\n\n  for (const contact of recipients) {\n    try {\n      await transporter.sendMail({\n        from: `\"EmailCraft Lite\" <${SMTP_USER}>`,\n        to: contact.email,\n        subject: subject,\n        html: htmlBody,\n      });\n      sentCount++;\n    } catch (error) {\n      failedCount++;\n      console.error(`Error al enviar correo a ${contact.email}:`, error);\n    }\n  }\n  \n  const endTime = Date.now();\n  const duration = (endTime - startTime) / 1000; // Duration in seconds\n\n  let message = `Campaña enviada. Enviados: ${sentCount}. Fallidos: ${failedCount}.`;\n  if (failedCount > 0) {\n     message += ' Revisa la consola del servidor para más detalles sobre los errores.'\n  }\n\n  return { \n    success: true, \n    message: message,\n    stats: {\n        sentCount,\n        failedCount,\n        totalRecipients,\n        duration,\n    }\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28main%29/campaigns/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {sendCampaign as '401372f659c5451f99035a7f116333db4ac66a7ce4'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/campaigns/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/campaigns/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/campaigns/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/campaigns/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/campaigns/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/campaigns/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}