{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\n/**\n * @fileoverview Configuración e inicialización de Genkit.\n * Este archivo centraliza la configuración del framework de IA Genkit,\n * especificando los plugins a utilizar (como Google AI) y el modelo\n * de lenguaje por defecto para toda la aplicación.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\n/**\n * @constant ai\n * Instancia global de Genkit configurada para la aplicación.\n * Utiliza el plugin de Google AI y establece 'gemini-2.0-flash' como el modelo por defecto.\n */\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":"AACA;;;;;CAKC;;;AACD;AAAA;AACA;AAAA;;;AAOO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/import-survey-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI flow for importing a survey from a public URL.\n *\n * - importSurvey - A function that handles the survey import process.\n * - ImportSurveyInput - The input type for the importSurvey function.\n * - ImportSurveyOutput - The return type for the importSurvey function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport 'isomorphic-fetch';\n\nconst QuestionSchema = z.object({\n  text: z.string().describe('The text of the survey question.'),\n  type: z\n    .enum(['text', 'textarea', 'multiple-choice', 'checkboxes'])\n    .describe(\n      'The type of the question. Infer this from the input elements. \"text\" for short answer, \"textarea\" for paragraph, \"multiple-choice\" for radio buttons (select one), and \"checkboxes\" for checkboxes (select many).'\n    ),\n  options: z\n    .array(z.object({ value: z.string() }))\n    .optional()\n    .describe('An array of options for multiple-choice or checkbox questions.'),\n});\n\nconst ImportSurveyInputSchema = z.object({\n  surveyUrl: z.string().url().describe('The public URL of the survey to import.'),\n});\nexport type ImportSurveyInput = z.infer<typeof ImportSurveyInputSchema>;\n\nconst ImportSurveyOutputSchema = z.object({\n  title: z.string().describe('The main title of the survey.'),\n  description: z.string().optional().describe('The description of the survey.'),\n  questions: z\n    .array(QuestionSchema)\n    .describe('An array of questions found in the survey.'),\n});\nexport type ImportSurveyOutput = z.infer<typeof ImportSurveyOutputSchema>;\n\n\nasync function getPageContent(url: string): Promise<string> {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch URL: ${response.statusText}`);\n        }\n        // Basic text extraction to simplify for the LLM. This is a very naive approach.\n        // A better approach would be to use a library like Cheerio to parse and clean the HTML,\n        // but for this task, we will rely on the LLM's ability to parse raw HTML.\n        const html = await response.text();\n        return html;\n    } catch (error) {\n        console.error('Error fetching page content:', error);\n        throw new Error('Could not retrieve the content from the provided URL.');\n    }\n}\n\n\nexport async function importSurvey(input: ImportSurveyInput): Promise<ImportSurveyOutput> {\n  return importSurveyFlow(input);\n}\n\n\nconst prompt = ai.definePrompt({\n    name: 'importSurveyPrompt',\n    input: { schema: z.object({ htmlContent: z.string() }) },\n    output: { schema: ImportSurveyOutputSchema },\n    prompt: `You are an expert at parsing HTML content from online survey tools like Google Forms or Microsoft Forms.\nYour task is to analyze the provided HTML and extract the survey's structure into the specified JSON format.\n\nPay close attention to the input fields (radio buttons, checkboxes, text inputs, textareas) to correctly identify the question type.\n- Radio buttons imply a 'multiple-choice' question.\n- Checkboxes imply a 'checkboxes' question.\n- A single-line text input implies a 'text' question.\n- A multi-line textarea implies a 'textarea' question.\n\nExtract the title, description, and all questions with their respective types and options if applicable.\n\nHTML to analyze:\n\\`\\`\\`html\n{{{htmlContent}}}\n\\`\\`\\`\n`,\n});\n\nconst importSurveyFlow = ai.defineFlow(\n  {\n    name: 'importSurveyFlow',\n    inputSchema: ImportSurveyInputSchema,\n    outputSchema: ImportSurveyOutputSchema,\n  },\n  async (input) => {\n    const htmlContent = await getPageContent(input.surveyUrl);\n    \n    const { output } = await prompt({ htmlContent });\n\n    if (!output) {\n      throw new Error('The AI could not extract survey data from the URL.');\n    }\n\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AACA;;;;;;;AAEA,MAAM,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,MAAM,oIAAA,CAAA,IAAC,CACJ,IAAI,CAAC;QAAC;QAAQ;QAAY;QAAmB;KAAa,EAC1D,QAAQ,CACP;IAEJ,SAAS,oIAAA,CAAA,IAAC,CACP,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IACnC,QAAQ,GACR,QAAQ,CAAC;AACd;AAEA,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;AACvC;AAGA,MAAM,2BAA2B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,WAAW,oIAAA,CAAA,IAAC,CACT,KAAK,CAAC,gBACN,QAAQ,CAAC;AACd;AAIA,eAAe,eAAe,GAAW;IACrC,IAAI;QACA,MAAM,WAAW,MAAM,MAAM;QAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,MAAM,IAAI,MAAM,CAAC,qBAAqB,EAAE,SAAS,UAAU,EAAE;QACjE;QACA,gFAAgF;QAChF,wFAAwF;QACxF,0EAA0E;QAC1E,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IACpB;AACJ;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAGA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3B,MAAM;IACN,OAAO;QAAE,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAE,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM;QAAG;IAAG;IACvD,QAAQ;QAAE,QAAQ;IAAyB;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;;;AAeb,CAAC;AACD;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,cAAc,MAAM,eAAe,MAAM,SAAS;IAExD,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;QAAE;IAAY;IAE9C,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;;;IA3CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/survey-actions.ts"],"sourcesContent":["'use server';\n\nimport { importSurvey, type ImportSurveyOutput } from '@/ai/flows/import-survey-flow';\n\n/**\n * Imports a survey from a public URL using an AI flow.\n * @param url The public URL of the survey.\n * @returns A promise that resolves to the structured survey data.\n */\nexport async function importSurveyAction(url: string): Promise<{ success: boolean; data?: ImportSurveyOutput; error?: string }> {\n    try {\n        const surveyData = await importSurvey({ surveyUrl: url });\n        return { success: true, data: surveyData };\n    } catch (error) {\n        console.error(\"Error in importSurveyAction: \", error);\n        return { success: false, error: (error as Error).message };\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAOO,eAAe,mBAAmB,GAAW;IAChD,IAAI;QACA,MAAM,aAAa,MAAM,CAAA,GAAA,8IAAA,CAAA,eAAY,AAAD,EAAE;YAAE,WAAW;QAAI;QACvD,OAAO;YAAE,SAAS;YAAM,MAAM;QAAW;IAC7C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;YAAE,SAAS;YAAO,OAAO,AAAC,MAAgB,OAAO;QAAC;IAC7D;AACJ;;;IARsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28main%29/surveys/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {importSurveyAction as '40543ab948698f4b314a0457131817e58d3e8e1622'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/surveys/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/surveys/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/surveys/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/surveys/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/surveys/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/surveys/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","debugId":null}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}