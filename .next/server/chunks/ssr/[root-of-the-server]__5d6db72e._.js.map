{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["/**\n * @fileOverview Datos de prueba para la aplicación.\n * Este archivo contiene datos de ejemplo para campañas y contactos,\n * utilizados para poblar la interfaz de usuario hasta que se conecte una base de datos real.\n */\n\n/**\n * Datos de ejemplo para las campañas de correo electrónico.\n */\nexport const campaigns = [\n  {\n    name: \"Campaña de Bienvenida\",\n    status: \"TERMINADA\",\n    sent: \"5,000\",\n    opens: \"35%\",\n    clicks: \"8%\",\n    date: \"2024-07-01\",\n  },\n  {\n    name: \"Oferta Flash 24h\",\n    status: \"EXPIRADA\",\n    sent: \"2,500\",\n    opens: \"45%\",\n    clicks: \"15%\",\n    date: \"2024-07-10\",\n  },\n  {\n    name: \"Lanzamiento Nuevo Producto\",\n    status: \"INICIADA\",\n    sent: \"1,200\",\n    opens: \"12%\",\n    clicks: \"2%\",\n    date: \"2024-07-18\",\n  },\n  {\n    name: \"Promoción Black Friday\",\n    status: \"TIEMPO LIMITADO\",\n    sent: \"0\",\n    opens: \"-\",\n    clicks: \"-\",\n    date: \"2024-11-29\",\n  },\n  {\n    name: \"Venta de Aniversario\",\n    status: \"AGOTADA\",\n    sent: \"10,000\",\n    opens: \"50%\",\n    clicks: \"20%\",\n    date: \"2024-06-15\",\n  },\n];\n\n/**\n * Datos de ejemplo para las plantillas de correo.\n */\nexport const templates = [\n  {\n    id: \"1\",\n    name: \"Newsletter Mensual\",\n    description: \"Plantilla estándar para el boletín informativo de cada mes.\",\n    image: \"https://placehold.co/600x400.png\",\n    aiHint: \"abstract pattern\"\n  },\n  {\n    id: \"2\",\n    name: \"Anuncio de Producto\",\n    description: \"Plantilla para anunciar nuevos productos o características.\",\n    image: \"https://placehold.co/600x400.png\",\n    aiHint: \"product launch\"\n  },\n  {\n    id: \"3\",\n    name: \"Oferta Especial\",\n    description: \"Diseño llamativo para promociones y descuentos.\",\n    image: \"https://placehold.co/600x400.png\",\n    aiHint: \"special offer\"\n  },\n];\n\n\n/**\n * Datos de ejemplo para los contactos.\n */\nexport const contacts = [\n  {\n    email: \"juan.perez@example.com\",\n    name: \"Juan Perez\",\n    status: \"Suscrito\",\n    dateAdded: \"2024-07-10\",\n  },\n  {\n    email: \"maria.garcia@example.com\",\n    name: \"Maria Garcia\",\n    status: \"Suscrito\",\n    dateAdded: \"2024-07-09\",\n  },\n  {\n    email: \"baja@example.com\",\n    name: \"Carlos Baja\",\n    status: \"Baja\",\n    dateAdded: \"2024-06-20\",\n  },\n];\n\n/**\n * Datos de ejemplo para las encuestas.\n */\nexport const surveys = [\n  {\n    id: \"1\",\n    name: \"Feedback de Producto de TI\",\n    description: \"Encuesta para recopilar opiniones sobre nuestro último software.\",\n    responses: 150,\n  },\n  {\n    id: \"2\",\n    name: \"Satisfacción del Cliente Tech\",\n    description: \"Mide la satisfacción general de nuestros clientes con el soporte técnico.\",\n    responses: 278,\n  },\n  {\n    id: \"3\",\n    name: \"Interés en Nuevos Cursos\",\n    description: \"Sondeo sobre posibles nuevos cursos de desarrollo y TI.\",\n    responses: 45,\n  },\n];\n\n/**\n * Datos de ejemplo para los eventos.\n */\nexport const events = [\n  {\n    id: \"1\",\n    name: \"Taller de Marketing Digital\",\n    date: \"2024-08-15\",\n    status: \"Realizado\",\n    attendees: 75,\n  },\n  {\n    id: \"2\",\n    name: \"Conferencia de Liderazgo\",\n    date: \"2024-09-05\",\n    status: \"Próximo\",\n    attendees: 120,\n  },\n  {\n    id: \"3\",\n    name: \"Webinar de Nuevas Tecnologías\",\n    date: \"2024-07-20\",\n    status: \"Realizado\",\n    attendees: 250,\n  },\n];\n\n/**\n * Plantillas de certificados de ejemplo (mapeado por event.id).\n * El contenido es una imagen PNG codificada en base64.\n */\nexport const certificateTemplates = {\n  '1': 'iVBORw0KGgoAAAANSUhEUgAAAMgAAABkCAYAAADDlWIpAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGSSURBVHhe7dJBDQAgDAAx2NB/yHwM46GE+zs7+8HBAgQIECAwERAgQIAAgYmAAAECEAEDAgECEQEBAgECEQEBAgECBAgQCAmY+wEECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIEAgISDOAwQIECBAICEgzoMECBAgQCAhIM4DBAgQIECAQEBAgAABAq8CgU5q3+UAAAAASUVORK5CYII=',\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;CAEC;;;;;;;;AACM,MAAM,YAAY;IACvB;QACE,MAAM;QACN,QAAQ;QACR,MAAM;QACN,OAAO;QACP,QAAQ;QACR,MAAM;IACR;IACA;QACE,MAAM;QACN,QAAQ;QACR,MAAM;QACN,OAAO;QACP,QAAQ;QACR,MAAM;IACR;IACA;QACE,MAAM;QACN,QAAQ;QACR,MAAM;QACN,OAAO;QACP,QAAQ;QACR,MAAM;IACR;IACA;QACE,MAAM;QACN,QAAQ;QACR,MAAM;QACN,OAAO;QACP,QAAQ;QACR,MAAM;IACR;IACA;QACE,MAAM;QACN,QAAQ;QACR,MAAM;QACN,OAAO;QACP,QAAQ;QACR,MAAM;IACR;CACD;AAKM,MAAM,YAAY;IACvB;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,QAAQ;IACV;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,QAAQ;IACV;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,QAAQ;IACV;CACD;AAMM,MAAM,WAAW;IACtB;QACE,OAAO;QACP,MAAM;QACN,QAAQ;QACR,WAAW;IACb;IACA;QACE,OAAO;QACP,MAAM;QACN,QAAQ;QACR,WAAW;IACb;IACA;QACE,OAAO;QACP,MAAM;QACN,QAAQ;QACR,WAAW;IACb;CACD;AAKM,MAAM,UAAU;IACrB;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,WAAW;IACb;CACD;AAKM,MAAM,SAAS;IACpB;QACE,IAAI;QACJ,MAAM;QACN,MAAM;QACN,QAAQ;QACR,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,MAAM;QACN,QAAQ;QACR,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,MAAM;QACN,QAAQ;QACR,WAAW;IACb;CACD;AAMM,MAAM,uBAAuB;IAClC,KAAK;AACP","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/permissions.ts"],"sourcesContent":["/**\n * @fileoverview Define los roles y permisos para el Control de Acceso Basado en Roles (RBAC).\n * Este archivo centraliza la lógica de permisos para simular un sistema RBAC.\n * En una aplicación real, esta información provendría de una base de datos.\n */\n\nexport const ROLES = {\n  IT: 'it',\n  MARKETING: 'marketing',\n  HR: 'hr',\n} as const;\n\nexport type Role = (typeof ROLES)[keyof typeof ROLES];\n\n// Define los permisos disponibles en la aplicación.\nexport const APP_PERMISSIONS = {\n  // General\n  VIEW_DASHBOARD: 'dashboard:view',\n  // Envío\n  SEND_CAMPAIGN: 'campaign:send',\n  VIEW_CAMPAIGN_MONITOR: 'campaign:view',\n  VIEW_MAILBOX: 'mailbox:view',\n  // Gestión\n  VIEW_CONTACTS: 'contacts:view',\n  VIEW_TEMPLATES: 'templates:view',\n  VIEW_EVENTS: 'events:view',\n  VIEW_SURVEYS: 'surveys:view',\n  // Avanzado: Página de Rendimiento\n  VIEW_PERFORMANCE: 'performance:view', // Acceso general a la página\n  GENERATE_REPORTS: 'performance:generate_report',\n  VIEW_PERFORMANCE_MAIN_METRICS: 'performance:view_main_metrics',\n  VIEW_PERFORMANCE_CHARTS: 'performance:view_charts',\n  VIEW_PERFORMANCE_FUNNEL: 'performance:view_funnel',\n  VIEW_PERFORMANCE_SEGMENTS: 'performance:view_segments',\n  VIEW_PERFORMANCE_PREDICTIONS: 'performance:view_predictions',\n  VIEW_PERFORMANCE_ERRORS: 'performance:view_errors',\n  VIEW_PERFORMANCE_SYSTEM: 'performance:view_system',\n  // Ajustes\n  VIEW_SETTINGS: 'settings:view',\n} as const;\n\nexport type Permission = (typeof APP_PERMISSIONS)[keyof typeof APP_PERMISSIONS];\n\n// Asigna permisos iniciales a cada rol. Esta será la configuración por defecto.\nexport const ROLE_PERMISSIONS: Record<Role, Permission[]> = {\n  [ROLES.IT]: Object.values(APP_PERMISSIONS), // TI tiene todos los permisos\n  [ROLES.MARKETING]: [\n    APP_PERMISSIONS.VIEW_DASHBOARD,\n    APP_PERMISSIONS.SEND_CAMPAIGN,\n    APP_PERMISSIONS.VIEW_CAMPAIGN_MONITOR,\n    APP_PERMISSIONS.VIEW_MAILBOX,\n    APP_PERMISSIONS.VIEW_CONTACTS,\n    APP_PERMISSIONS.VIEW_TEMPLATES,\n    APP_PERMISSIONS.VIEW_SURVEYS,\n    APP_PERMISSIONS.VIEW_PERFORMANCE, // Acceso a la página\n    APP_PERMISSIONS.VIEW_PERFORMANCE_MAIN_METRICS,\n    APP_PERMISSIONS.VIEW_PERFORMANCE_CHARTS,\n    APP_PERMISSIONS.VIEW_PERFORMANCE_FUNNEL,\n    APP_PERMISSIONS.VIEW_PERFORMANCE_SEGMENTS,\n    APP_PERMISSIONS.VIEW_PERFORMANCE_PREDICTIONS,\n  ],\n  [ROLES.HR]: [\n    APP_PERMISSIONS.VIEW_DASHBOARD,\n    APP_PERMISSIONS.SEND_CAMPAIGN,\n    APP_PERMISSIONS.VIEW_CAMPAIGN_MONITOR,\n    APP_PERMISSIONS.VIEW_MAILBOX,\n    APP_PERMISSIONS.VIEW_CONTACTS,\n    APP_PERMISSIONS.VIEW_EVENTS,\n  ],\n};\n\n/**\n * Comprueba si un rol tiene un permiso específico.\n * @param role El rol del usuario.\n * @param permission El permiso a comprobar.\n * @returns `true` si el rol tiene el permiso, `false` en caso contrario.\n */\nexport function hasPermission(role: Role | null, permission: Permission): boolean {\n  if (!role) return false;\n  // En una implementación real y dinámica, ROLE_PERMISSIONS se obtendría\n  // de un estado global o contexto que el admin de TI puede modificar.\n  // Por ahora, usamos la configuración estática.\n  return ROLE_PERMISSIONS[role]?.includes(permission) || false;\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;AAEM,MAAM,QAAQ;IACnB,IAAI;IACJ,WAAW;IACX,IAAI;AACN;AAKO,MAAM,kBAAkB;IAC7B,UAAU;IACV,gBAAgB;IAChB,QAAQ;IACR,eAAe;IACf,uBAAuB;IACvB,cAAc;IACd,UAAU;IACV,eAAe;IACf,gBAAgB;IAChB,aAAa;IACb,cAAc;IACd,kCAAkC;IAClC,kBAAkB;IAClB,kBAAkB;IAClB,+BAA+B;IAC/B,yBAAyB;IACzB,yBAAyB;IACzB,2BAA2B;IAC3B,8BAA8B;IAC9B,yBAAyB;IACzB,yBAAyB;IACzB,UAAU;IACV,eAAe;AACjB;AAKO,MAAM,mBAA+C;IAC1D,CAAC,MAAM,EAAE,CAAC,EAAE,OAAO,MAAM,CAAC;IAC1B,CAAC,MAAM,SAAS,CAAC,EAAE;QACjB,gBAAgB,cAAc;QAC9B,gBAAgB,aAAa;QAC7B,gBAAgB,qBAAqB;QACrC,gBAAgB,YAAY;QAC5B,gBAAgB,aAAa;QAC7B,gBAAgB,cAAc;QAC9B,gBAAgB,YAAY;QAC5B,gBAAgB,gBAAgB;QAChC,gBAAgB,6BAA6B;QAC7C,gBAAgB,uBAAuB;QACvC,gBAAgB,uBAAuB;QACvC,gBAAgB,yBAAyB;QACzC,gBAAgB,4BAA4B;KAC7C;IACD,CAAC,MAAM,EAAE,CAAC,EAAE;QACV,gBAAgB,cAAc;QAC9B,gBAAgB,aAAa;QAC7B,gBAAgB,qBAAqB;QACrC,gBAAgB,YAAY;QAC5B,gBAAgB,aAAa;QAC7B,gBAAgB,WAAW;KAC5B;AACH;AAQO,SAAS,cAAc,IAAiB,EAAE,UAAsB;IACrE,IAAI,CAAC,MAAM,OAAO;IAClB,uEAAuE;IACvE,qEAAqE;IACrE,+CAA+C;IAC/C,OAAO,gBAAgB,CAAC,KAAK,EAAE,SAAS,eAAe;AACzD","debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions/send-campaign-action.ts"],"sourcesContent":["\n'use server';\n\nimport 'isomorphic-fetch';\nimport { ClientSecretCredential } from '@azure/identity';\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { TokenCredentialAuthenticationProvider } from '@microsoft/microsoft-graph-client/authProviders/azureTokenCredentials';\nimport mysql from 'mysql2/promise';\n// Importa la función parse del paquete csv-parse/sync para parsear archivos CSV de forma síncrona.\nimport { parse } from 'csv-parse/sync';\n// Importa todas las funciones del paquete xlsx bajo el alias XLSX para trabajar con archivos Excel.\nimport * as XLSX from 'xlsx';\n// Importa la constante 'events' desde el módulo de datos local.\nimport { events } from '@/lib/data';\nimport { hasPermission, APP_PERMISSIONS, type Role } from '@/lib/permissions';\n\n/**\n * @fileoverview Acción de servidor para enviar una campaña de correo electrónico.\n * Obtiene destinatarios desde una fuente de datos y los envía por lotes\n * para respetar los límites de la API, utilizando Microsoft Graph.\n *\n * Las acciones de servidor se ejecutan en el lado del servidor y pueden ser llamadas\n * desde el lado del cliente.\n */\n\n// Define una interfaz para el payload que se espera al enviar una campaña.\ninterface SendCampaignPayload {\n  subject: string; // El asunto del correo electrónico.\n  // El cuerpo del correo electrónico en formato HTML.\n  htmlBody: string;\n  recipientData: {\n    type: 'date' | 'csv' | 'sql' | 'excel';\n    value: string;\n  };\n  // Propiedad opcional para adjuntar un archivo al correo.\n  attachment?: {\n    filename: string; // El nombre del archivo adjunto.\n    contentType: string; // El tipo MIME del archivo adjunto.\n    // El contenido del archivo adjunto codificado en base64.\n    content: string; // base64 content\n  };\n  // ID opcional de un evento para personalizar el correo (ej: fecha del evento).\n  eventId?: string; // ID opcional de un evento.\n  role: Role; // Rol del usuario que ejecuta la acción para verificación de permisos\n}\n\ninterface Recipient {\n  email: string;\n  name?: string;\n}\n\n/**\n * Obtiene una lista de destinatarios desde la fuente especificada.\n */\nasync function getRecipients(\n  recipientData: SendCampaignPayload['recipientData']\n): Promise<Recipient[]> {\n  const { type, value } = recipientData;\n  // Desestructura el tipo y el valor de los datos del destinatario.\n\n  // Función auxiliar para encontrar una clave en un objeto de forma insensible a mayúsculas/minúsculas.\n  const findKey = (obj: object, potentialKeys: string[]) => {\n    // Itera sobre las claves del objeto.\n    const key = Object.keys(obj).find(k => potentialKeys.includes(k.toLowerCase()));\n    // Si encuentra una clave que coincide (insensible a mayúsculas/minúsculas), devuelve su valor; de lo contrario, undefined.\n    return key ? obj[key as keyof typeof obj] : undefined;\n  };\n\n  if (type === 'csv') {\n    try {\n      const records = parse(value, {\n        columns: true,\n        // Especifica que la primera fila contiene nombres de columnas.\n        skip_empty_lines: true,\n        // Omite las líneas vacías del archivo CSV.\n      });\n      // Parsear el valor del CSV en un array de objetos.\n      if (records.length === 0) return [];\n      // Si no hay registros, retorna un array vacío.\n\n      const emailKey = Object.keys(records[0]).find(k => k.toLowerCase() === 'email');\n      // Busca la clave 'email' (insensible a mayúsculas/minúsculas) en el primer registro.\n      if (!emailKey) throw new Error('La columna \"email\" no se encontró en el archivo CSV.');\n      // Si no se encuentra la columna 'email', lanza un error.\n\n      return records.map((record: any) => ({\n        email: record[emailKey],\n        name: findKey(record, ['name', 'nombre', 'fullname', 'nombre completo']),\n      })).filter((r: Recipient) => r.email && r.email.includes('@'));\n      // Mapea los registros para crear objetos Recipient y filtra los que no tienen un email válido.\n    } catch (error) {\n      console.error('Error al procesar el archivo CSV:', error);\n      throw new Error(`Error al procesar el archivo CSV: ${(error as Error).message}`);\n    }\n  }\n\n  if (type === 'excel') {\n    try {\n      // Decodifica el contenido base64 del archivo Excel a un buffer.\n      const buffer = Buffer.from(value, 'base64');\n      // Lee el buffer como un libro de trabajo de Excel.\n      const workbook = XLSX.read(buffer, { type: 'buffer' });\n      // Obtiene el nombre de la primera hoja del libro de trabajo.\n      const sheetName = workbook.SheetNames[0];\n      // Obtiene la hoja de trabajo por su nombre.\n      const worksheet = workbook.Sheets[sheetName];\n      // Convierte la hoja de trabajo a un array de objetos JSON.\n      const jsonData: any[] = XLSX.utils.sheet_to_json(worksheet);\n      if (jsonData.length === 0) return [];\n      // Si no hay datos JSON, retorna un array vacío.\n\n      const emailKey = Object.keys(jsonData[0]).find(key => key.toLowerCase() === 'email');\n      // Busca la clave 'email' (insensible a mayúsculas/minúsculas) en el primer objeto JSON.\n      if (!emailKey) throw new Error('La columna \"email\" no se encontró en el archivo Excel.');\n      // Si no se encuentra la columna 'email', lanza un error.\n\n      return jsonData.map(row => ({\n        email: row[emailKey],\n        name: findKey(row, ['name', 'nombre', 'fullname', 'nombre completo']),\n      })).filter(r => r.email && typeof r.email === 'string' && r.email.includes('@'));\n    } catch (error) {\n      console.error('Error al procesar el archivo Excel:', error);\n      throw new Error(`Error al procesar el archivo Excel: ${(error as Error).message}`);\n    }\n  }\n\n  const { MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_PORT } = process.env;\n  // Desestructura las variables de entorno para la conexión a la base de datos.\n  if (!MYSQL_HOST || !MYSQL_USER || !MYSQL_DATABASE) {\n    throw new Error('Faltan las variables de entorno de la base de datos. Por favor, configúralas.');\n  }\n  // Verifica que las variables de entorno necesarias para la base de datos estén configuradas. Si faltan, lanza un error.\n\n\n  let connection;\n  try {\n    connection = await mysql.createConnection({\n      host: MYSQL_HOST,\n      port: MYSQL_PORT ? parseInt(MYSQL_PORT, 10) : 3306,\n      user: MYSQL_USER,\n      // Convierte el puerto a número si está definido, de lo contrario usa 3306.\n      password: MYSQL_PASSWORD,\n      database: MYSQL_DATABASE,\n    });\n    // Crea una conexión a la base de datos MySQL utilizando las variables de entorno.\n\n    let sql_query = '';\n    let params: any[] = [];\n    // Inicializa la variable para la consulta SQL y los parámetros.\n\n    // Si el tipo de datos del destinatario es 'date', construye la consulta SQL para obtener contactos por fecha.\n    if (type === 'date') {\n      sql_query = `\n        SELECT t1.email, t1.nombre_completo as name\n        FROM order_data AS t1 INNER JOIN order_data_online AS t2 ON t1.Ds_Merchant_Order = t2.Ds_Order\n        WHERE\n            t1.fecha_visita = ?\n            AND t2.Ds_ErrorCode = '00'\n            AND t2.Ds_ErrorMessage = 'completed'\n            AND NOT t1.email IN ('alberto.silva@papalote.org.mx', 'alejandracervantesm@gmail.com')\n      `;\n      params = [value];\n      // El valor se usa como parámetro para la fecha de visita.\n      // Si el tipo de datos del destinatario es 'sql', usa el valor directamente como consulta SQL.\n    } else if (type === 'sql') {\n      sql_query = value;\n      params = []; // Las consultas SQL personalizadas no esperan parámetros por defecto aquí.\n    }\n\n    const [rows] = await connection.execute(sql_query, params);\n    return (rows as Recipient[]).filter(row => row.email);\n    // Ejecuta la consulta SQL y filtra las filas para asegurarse de que tengan un email.\n  } catch (error) {\n    console.error('Error al conectar o consultar la base de datos:', error);\n    throw new Error('No se pudo obtener los contactos de la base de datos.');\n    // Captura y loguea errores de conexión o consulta de la base de datos, luego lanza un nuevo error.\n  } finally {\n    if (connection) await connection.end();\n    // Asegura que la conexión a la base de datos se cierre al finalizar (éxito o error).\n  }\n}\n\n// Función asíncrona para obtener una instancia del cliente de Microsoft Graph.\nasync function getGraphClient() {\n    // Desestructura las variables de entorno necesarias para la autenticación con Microsoft Graph.\n    const { GRAPH_CLIENT_ID, GRAPH_TENANT_ID, GRAPH_CLIENT_SECRET } = process.env;\n    if (!GRAPH_CLIENT_ID || !GRAPH_TENANT_ID || !GRAPH_CLIENT_SECRET) {\n        throw new Error('Faltan las variables de entorno de Microsoft Graph. Por favor, configúralas.');\n    }\n    const credential = new ClientSecretCredential(GRAPH_TENANT_ID, GRAPH_CLIENT_ID, GRAPH_CLIENT_SECRET);\n    const authProvider = new TokenCredentialAuthenticationProvider(credential, { scopes: ['https://graph.microsoft.com/.default'] });\n    return Client.initWithMiddleware({ authProvider });\n}\n\n// Función de utilidad para crear un retraso basado en un número de milisegundos.\nconst delay = (ms: number) => new Promise(res => setTimeout(res, ms));\n\n\n/**\n * Envía un correo electrónico utilizando Microsoft Graph con una política de reintentos.\n * @param graphClient - El cliente de Microsoft Graph.\n * @param message - El objeto de mensaje a enviar.\n * @param userMail - El correo del usuario remitente.\n * @param maxRetries - El número máximo de reintentos.\n * @throws Si el envío falla después de todos los reintentos.\n */\nasync function sendEmailWithRetry(graphClient: Client, message: any, userMail: string, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            await graphClient.api(`/users/${userMail}/sendMail`).post({ message, saveToSentItems: 'true' });\n            return; // Éxito\n        } catch (error: any) {\n            // Verifica si es un error de throttling (demasiadas solicitudes)\n            if (error.statusCode === 429 && i < maxRetries - 1) {\n                // Obtiene el tiempo de espera del encabezado 'retry-after' o usa un backoff exponencial.\n                const retryAfter = error.responseHeaders?.['retry-after'] || Math.pow(2, i);\n                console.warn(`Throttled por la API de Graph. Reintentando en ${retryAfter} segundos...`);\n                await delay(retryAfter * 1000);\n            } else {\n                // Si es otro tipo de error, lo relanza para que sea manejado más arriba.\n                throw error;\n            }\n        }\n    }\n    // Si todos los reintentos fallan, lanza un error.\n    throw new Error(`No se pudo enviar el correo después de ${maxRetries} reintentos.`);\n}\n\n\n// Acción de servidor principal para enviar la campaña de correo electrónico.\nexport async function sendCampaign(payload: SendCampaignPayload) {\n  const { subject, htmlBody, recipientData, attachment, eventId, role } = payload;\n  \n  if (!hasPermission(role, APP_PERMISSIONS.SEND_CAMPAIGN)) {\n    throw new Error('Acceso denegado: No tienes permiso para enviar campañas.');\n  }\n  \n  // Estos ajustes ahora están configurados globalmente (ej: en la página de Ajustes).\n  // Para esta acción, usaremos valores por defecto. En una aplicación real, se obtendrían de una base de datos o servicio de configuración.\n  const batchSize = 50;\n  const emailDelay = 100; // milisegundos\n  const batchDelay = 5; // segundos\n\n  const startTime = Date.now();\n  // Registra el tiempo de inicio para calcular la duración total.\n\n  const { GRAPH_USER_MAIL } = process.env;\n  if (!GRAPH_USER_MAIL) {\n    throw new Error('Falta la variable de entorno GRAPH_USER_MAIL. Por favor, configúrala.');\n  }\n  // Verifica que la variable de entorno GRAPH_USER_MAIL esté configurada. Si falta, lanza un error.\n\n  const recipients = await getRecipients(recipientData);\n  // Obtiene la lista de destinatarios utilizando la función getRecipients.\n  if (recipients.length === 0) {\n    return { success: true, message: `No se encontraron destinatarios. No se enviaron correos.`, stats: { sentCount: 0, failedCount: 0, totalRecipients: 0, duration: 0 } };\n  }\n  // Si no se encontraron destinatarios, retorna un resultado exitoso con estadísticas de cero envíos.\n\n  // Busca el evento correspondiente si se proporcionó un eventId.\n  const event = eventId ? events.find(e => e.id === eventId) : null;\n  // Obtiene el número total de destinatarios.\n  const totalRecipients = recipients.length;\n  // Obtiene una instancia del cliente de Microsoft Graph.\n  const graphClient = await getGraphClient();\n  let sentCount = 0;\n  let failedCount = 0;\n\n  const recipientBatches = [];\n  for (let i = 0; i < recipients.length; i += batchSize) {\n    recipientBatches.push(recipients.slice(i, i + batchSize));\n  }\n  // Divide la lista de destinatarios en lotes según el tamaño de lote especificado.\n\n  // Itera sobre cada lote de destinatarios.\n  for (const [index, batch] of recipientBatches.entries()) {\n    // Itera sobre cada contacto dentro del lote actual.\n    for (const contact of batch) {\n        try {\n            // Inicializa el cuerpo final del correo con el cuerpo HTML original.\n            let finalHtmlBody = htmlBody;\n            // Reemplaza el placeholder {{contact.name}} si existe el nombre del contacto.\n            if (contact.name) {\n              finalHtmlBody = finalHtmlBody.replace(/{{contact.name}}/g, contact.name);\n            }\n            // Reemplaza el placeholder {{event.date}} si existe la fecha del evento.\n            if (event) {\n              finalHtmlBody = finalHtmlBody.replace(/{{event.date}}/g, event.date);\n            }\n            // Limpia cualquier marcador de posición que no haya sido reemplazado.\n            finalHtmlBody = finalHtmlBody.replace(/{{contact.name}}/g, '');\n            finalHtmlBody = finalHtmlBody.replace(/{{event.date}}/g, '');\n\n            const message = {\n                subject: subject,\n                body: { contentType: 'HTML', content: finalHtmlBody },\n                toRecipients: [{ emailAddress: { address: contact.email } }],\n                attachments: attachment ? [\n                  {\n                      '@odata.type': '#microsoft.graph.fileAttachment',\n                      name: attachment.filename,\n                      contentType: attachment.contentType,\n                      contentBytes: attachment.content,\n                  }\n                ] : undefined,\n            };\n            \n            // Envía el correo usando la función con lógica de reintentos.\n            await sendEmailWithRetry(graphClient, message, GRAPH_USER_MAIL);\n\n            sentCount++;\n            // Incrementa el contador de correos enviados exitosamente.\n        } catch (error) {\n            failedCount++;\n            const errorMessage = (error as any)?.body ? JSON.parse((error as any).body).error.message : (error as Error).message;\n            console.error(`Error al enviar correo a ${contact.email} usando Graph:`, errorMessage);\n            // Incrementa el contador de correos fallidos.\n            // Loguea el error detallado al enviar el correo a un contacto específico.\n        }\n        \n        if(emailDelay > 0) await delay(emailDelay);\n    }\n    \n    if (index < recipientBatches.length - 1) {\n      if(batchDelay > 0) await delay(batchDelay * 1000);\n      // Si no es el último lote y hay un retraso de lote configurado, espera antes de procesar el siguiente lote.\n    }\n  }\n\n  // Registra el tiempo de finalización.\n  const endTime = Date.now();\n  // Calcula la duración total del proceso de envío en segundos.\n  const duration = (endTime - startTime) / 1000;\n\n  let message = `Envío completado con Microsoft Graph. Enviados: ${sentCount}. Fallidos: ${failedCount}.`;\n  if (failedCount > 0) {\n    message += ' Revisa la consola del servidor para más detalles sobre los errores.';\n  }\n\n  // Retorna un objeto con el estado de éxito, un mensaje resumen y estadísticas del envío.\n  return { success: true, message, stats: { sentCount, failedCount, totalRecipients, duration } };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 820, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions/send-test-email-action.ts"],"sourcesContent":["'use server';\n\nimport 'isomorphic-fetch';\nimport { ClientSecretCredential } from '@azure/identity';\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { TokenCredentialAuthenticationProvider } from '@microsoft/microsoft-graph-client/authProviders/azureTokenCredentials';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport { events } from '@/lib/data';\nimport { hasPermission, APP_PERMISSIONS, type Role } from '@/lib/permissions';\n\n/**\n * @fileoverview Acción de servidor para enviar un único correo de prueba.\n * Incluye verificación de permisos basada en rol.\n */\n\ninterface SendTestEmailPayload {\n  subject: string;\n  htmlBody: string;\n  recipientEmail: string;\n  attachment?: {\n    filename: string;\n    contentType: string;\n    content: string; // base64 content\n  };\n  eventId?: string;\n  role: Role;\n}\n\nasync function getGraphClient() {\n    const { GRAPH_CLIENT_ID, GRAPH_TENANT_ID, GRAPH_CLIENT_SECRET } = process.env;\n    if (!GRAPH_CLIENT_ID || !GRAPH_TENANT_ID || !GRAPH_CLIENT_SECRET) {\n        throw new Error('Faltan las variables de entorno de Microsoft Graph. Por favor, configúralas en Ajustes.');\n    }\n    const credential = new ClientSecretCredential(GRAPH_TENANT_ID, GRAPH_CLIENT_ID, GRAPH_CLIENT_SECRET);\n    const authProvider = new TokenCredentialAuthenticationProvider(credential, { scopes: ['https://graph.microsoft.com/.default'] });\n    return Client.initWithMiddleware({ authProvider });\n}\n\nexport async function sendTestEmailAction(payload: SendTestEmailPayload): Promise<{ success: boolean }> {\n  const { subject, htmlBody, recipientEmail, attachment, eventId, role } = payload;\n  \n  if (!hasPermission(role, APP_PERMISSIONS.SEND_CAMPAIGN)) {\n    throw new Error('Acceso denegado: No tienes permiso para enviar correos de prueba.');\n  }\n\n  const { GRAPH_USER_MAIL } = process.env;\n  if (!GRAPH_USER_MAIL) {\n    throw new Error('Falta la variable de entorno GRAPH_USER_MAIL. Por favor, configúrala.');\n  }\n\n  const event = eventId ? events.find(e => e.id === eventId) : null;\n  \n  let finalHtmlBody = htmlBody;\n  // Replace placeholders with test data\n  finalHtmlBody = finalHtmlBody.replace(/{{contact.name}}/g, 'Usuario de Prueba');\n  if (event) {\n    finalHtmlBody = finalHtmlBody.replace(/{{event.date}}/g, event.date);\n  } else {\n    // If no event, use today's date for placeholder\n    finalHtmlBody = finalHtmlBody.replace(/{{event.date}}/g, format(new Date(), 'PPP', { locale: es }));\n  }\n  // Clean up any other unreplaced placeholders\n  finalHtmlBody = finalHtmlBody.replace(/{{contact.name}}/g, '');\n  finalHtmlBody = finalHtmlBody.replace(/{{event.date}}/g, '');\n\n\n  const message = {\n    subject: `[PRUEBA] ${subject}`,\n    body: { contentType: 'HTML', content: finalHtmlBody },\n    toRecipients: [{ emailAddress: { address: recipientEmail } }],\n    attachments: attachment ? [\n      {\n          '@odata.type': '#microsoft.graph.fileAttachment',\n          name: attachment.filename,\n          contentType: attachment.contentType,\n          contentBytes: attachment.content,\n      }\n    ] : undefined,\n  };\n\n  try {\n    const graphClient = await getGraphClient();\n    await graphClient.api(`/users/${GRAPH_USER_MAIL}/sendMail`).post({ message, saveToSentItems: 'true' });\n    return { success: true };\n  } catch (error) {\n    const errorMessage = (error as any)?.body ? JSON.parse((error as any).body).error.message : (error as Error).message;\n    console.error(`Error al enviar correo de prueba a ${recipientEmail} usando Graph:`, errorMessage);\n    throw new Error(`No se pudo enviar el correo de prueba: ${errorMessage}`);\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAoBA,eAAe;IACX,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE,mBAAmB,EAAE,GAAG,QAAQ,GAAG;IAC7E,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,qBAAqB;QAC9D,MAAM,IAAI,MAAM;IACpB;IACA,MAAM,aAAa,IAAI,2LAAA,CAAA,yBAAsB,CAAC,iBAAiB,iBAAiB;IAChF,MAAM,eAAe,IAAI,8MAAA,CAAA,wCAAqC,CAAC,YAAY;QAAE,QAAQ;YAAC;SAAuC;IAAC;IAC9H,OAAO,yLAAA,CAAA,SAAM,CAAC,kBAAkB,CAAC;QAAE;IAAa;AACpD;AAEO,eAAe,oBAAoB,OAA6B;IACrE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG;IAEzE,IAAI,CAAC,CAAA,GAAA,yHAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,yHAAA,CAAA,kBAAe,CAAC,aAAa,GAAG;QACvD,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,EAAE,eAAe,EAAE,GAAG,QAAQ,GAAG;IACvC,IAAI,CAAC,iBAAiB;QACpB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,QAAQ,UAAU,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,WAAW;IAE7D,IAAI,gBAAgB;IACpB,sCAAsC;IACtC,gBAAgB,cAAc,OAAO,CAAC,qBAAqB;IAC3D,IAAI,OAAO;QACT,gBAAgB,cAAc,OAAO,CAAC,mBAAmB,MAAM,IAAI;IACrE,OAAO;QACL,gDAAgD;QAChD,gBAAgB,cAAc,OAAO,CAAC,mBAAmB,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,QAAQ,OAAO;YAAE,QAAQ,4IAAA,CAAA,KAAE;QAAC;IAClG;IACA,6CAA6C;IAC7C,gBAAgB,cAAc,OAAO,CAAC,qBAAqB;IAC3D,gBAAgB,cAAc,OAAO,CAAC,mBAAmB;IAGzD,MAAM,UAAU;QACd,SAAS,CAAC,SAAS,EAAE,SAAS;QAC9B,MAAM;YAAE,aAAa;YAAQ,SAAS;QAAc;QACpD,cAAc;YAAC;gBAAE,cAAc;oBAAE,SAAS;gBAAe;YAAE;SAAE;QAC7D,aAAa,aAAa;YACxB;gBACI,eAAe;gBACf,MAAM,WAAW,QAAQ;gBACzB,aAAa,WAAW,WAAW;gBACnC,cAAc,WAAW,OAAO;YACpC;SACD,GAAG;IACN;IAEA,IAAI;QACF,MAAM,cAAc,MAAM;QAC1B,MAAM,YAAY,GAAG,CAAC,CAAC,OAAO,EAAE,gBAAgB,SAAS,CAAC,EAAE,IAAI,CAAC;YAAE;YAAS,iBAAiB;QAAO;QACpG,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,MAAM,eAAe,AAAC,OAAe,OAAO,KAAK,KAAK,CAAC,AAAC,MAAc,IAAI,EAAE,KAAK,CAAC,OAAO,GAAG,AAAC,MAAgB,OAAO;QACpH,QAAQ,KAAK,CAAC,CAAC,mCAAmC,EAAE,eAAe,cAAc,CAAC,EAAE;QACpF,MAAM,IAAI,MAAM,CAAC,uCAAuC,EAAE,cAAc;IAC1E;AACF;;;IAnDsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 933, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28main%29/send/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {sendCampaign as '401372f659c5451f99035a7f116333db4ac66a7ce4'} from 'ACTIONS_MODULE0'\nexport {sendTestEmailAction as '406b923f738831070980d62a75596a77849741996f'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 997, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/send/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/send/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/send/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 1011, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/send/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/send/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/send/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4Q,GACzS,0CACA","debugId":null}},
    {"offset": {"line": 1025, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}